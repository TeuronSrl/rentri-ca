# coding: utf-8

"""
    ca-rentri

    Servizio RENTRI CA

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictStr, conint, constr

from typing import List, Optional

from rentri_ca.models.device_model import DeviceModel
from rentri_ca.models.sync_device_info_request import SyncDeviceInfoRequest

from rentri_ca.api_client import ApiClient
from rentri_ca.api_response import ApiResponse
from rentri_ca.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class GestioneDispositiviApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def devices_device_id_identificativo_soggetto_get(self, device_id : Annotated[constr(strict=True, max_length=50), Field(..., description="Criteri di ricerca dei dispositivi.")], identificativo_soggetto : Annotated[StrictStr, Field(..., description="Identificativo del soggetto.")], **kwargs) -> DeviceModel:  # noqa: E501
        """Dettaglio dispositivo  # noqa: E501

        Ottiene informazioni di dettaglio di un dispositivo.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_device_id_identificativo_soggetto_get(device_id, identificativo_soggetto, async_req=True)
        >>> result = thread.get()

        :param device_id: Criteri di ricerca dei dispositivi. (required)
        :type device_id: str
        :param identificativo_soggetto: Identificativo del soggetto. (required)
        :type identificativo_soggetto: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DeviceModel
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the devices_device_id_identificativo_soggetto_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.devices_device_id_identificativo_soggetto_get_with_http_info(device_id, identificativo_soggetto, **kwargs)  # noqa: E501

    @validate_arguments
    def devices_device_id_identificativo_soggetto_get_with_http_info(self, device_id : Annotated[constr(strict=True, max_length=50), Field(..., description="Criteri di ricerca dei dispositivi.")], identificativo_soggetto : Annotated[StrictStr, Field(..., description="Identificativo del soggetto.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Dettaglio dispositivo  # noqa: E501

        Ottiene informazioni di dettaglio di un dispositivo.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_device_id_identificativo_soggetto_get_with_http_info(device_id, identificativo_soggetto, async_req=True)
        >>> result = thread.get()

        :param device_id: Criteri di ricerca dei dispositivi. (required)
        :type device_id: str
        :param identificativo_soggetto: Identificativo del soggetto. (required)
        :type identificativo_soggetto: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DeviceModel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'device_id',
            'identificativo_soggetto'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_device_id_identificativo_soggetto_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['device_id'] is not None:
            _path_params['device_id'] = _params['device_id']

        if _params['identificativo_soggetto'] is not None:
            _path_params['identificativo_soggetto'] = _params['identificativo_soggetto']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "DeviceModel",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/devices/{device_id}/{identificativo_soggetto}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def devices_get(self, identificativo_soggetto : Annotated[StrictStr, Field(..., description="Identificativo del soggetto.")], user_name : Annotated[Optional[constr(strict=True, max_length=256)], Field(description="Identificativo dell'utente (da SPID, CIE, CNS).")] = None, device_id : Annotated[Optional[constr(strict=True, max_length=50)], Field(description="Identificativo del dispositivo.")] = None, credentials_id : Annotated[Optional[constr(strict=True, max_length=9, min_length=9)], Field(description="Identificativo delle credenziali.")] = None, attivi : Annotated[Optional[StrictBool], Field(description="Indica se includere solamente i dispositivi attivi.")] = None, paging_page : Annotated[Optional[conint(strict=True, le=2147483647, ge=1)], Field(description="Valore per l'header Paging-Page.")] = None, paging_page_size : Annotated[Optional[conint(strict=True, le=200, ge=1)], Field(description="Valore per l'header Paging-PageSize.")] = None, **kwargs) -> List[DeviceModel]:  # noqa: E501
        """Elenco dispositivi  # noqa: E501

        Ottiene l'elenco dei dispositivi, filtrati in base ai criteri specificati.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_get(identificativo_soggetto, user_name, device_id, credentials_id, attivi, paging_page, paging_page_size, async_req=True)
        >>> result = thread.get()

        :param identificativo_soggetto: Identificativo del soggetto. (required)
        :type identificativo_soggetto: str
        :param user_name: Identificativo dell'utente (da SPID, CIE, CNS).
        :type user_name: str
        :param device_id: Identificativo del dispositivo.
        :type device_id: str
        :param credentials_id: Identificativo delle credenziali.
        :type credentials_id: str
        :param attivi: Indica se includere solamente i dispositivi attivi.
        :type attivi: bool
        :param paging_page: Valore per l'header Paging-Page.
        :type paging_page: int
        :param paging_page_size: Valore per l'header Paging-PageSize.
        :type paging_page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[DeviceModel]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the devices_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.devices_get_with_http_info(identificativo_soggetto, user_name, device_id, credentials_id, attivi, paging_page, paging_page_size, **kwargs)  # noqa: E501

    @validate_arguments
    def devices_get_with_http_info(self, identificativo_soggetto : Annotated[StrictStr, Field(..., description="Identificativo del soggetto.")], user_name : Annotated[Optional[constr(strict=True, max_length=256)], Field(description="Identificativo dell'utente (da SPID, CIE, CNS).")] = None, device_id : Annotated[Optional[constr(strict=True, max_length=50)], Field(description="Identificativo del dispositivo.")] = None, credentials_id : Annotated[Optional[constr(strict=True, max_length=9, min_length=9)], Field(description="Identificativo delle credenziali.")] = None, attivi : Annotated[Optional[StrictBool], Field(description="Indica se includere solamente i dispositivi attivi.")] = None, paging_page : Annotated[Optional[conint(strict=True, le=2147483647, ge=1)], Field(description="Valore per l'header Paging-Page.")] = None, paging_page_size : Annotated[Optional[conint(strict=True, le=200, ge=1)], Field(description="Valore per l'header Paging-PageSize.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Elenco dispositivi  # noqa: E501

        Ottiene l'elenco dei dispositivi, filtrati in base ai criteri specificati.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_get_with_http_info(identificativo_soggetto, user_name, device_id, credentials_id, attivi, paging_page, paging_page_size, async_req=True)
        >>> result = thread.get()

        :param identificativo_soggetto: Identificativo del soggetto. (required)
        :type identificativo_soggetto: str
        :param user_name: Identificativo dell'utente (da SPID, CIE, CNS).
        :type user_name: str
        :param device_id: Identificativo del dispositivo.
        :type device_id: str
        :param credentials_id: Identificativo delle credenziali.
        :type credentials_id: str
        :param attivi: Indica se includere solamente i dispositivi attivi.
        :type attivi: bool
        :param paging_page: Valore per l'header Paging-Page.
        :type paging_page: int
        :param paging_page_size: Valore per l'header Paging-PageSize.
        :type paging_page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[DeviceModel], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'identificativo_soggetto',
            'user_name',
            'device_id',
            'credentials_id',
            'attivi',
            'paging_page',
            'paging_page_size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('identificativo_soggetto') is not None:  # noqa: E501
            _query_params.append(('identificativo_soggetto', _params['identificativo_soggetto']))

        if _params.get('user_name') is not None:  # noqa: E501
            _query_params.append(('user_name', _params['user_name']))

        if _params.get('device_id') is not None:  # noqa: E501
            _query_params.append(('device_id', _params['device_id']))

        if _params.get('credentials_id') is not None:  # noqa: E501
            _query_params.append(('credentials_id', _params['credentials_id']))

        if _params.get('attivi') is not None:  # noqa: E501
            _query_params.append(('attivi', _params['attivi']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['paging_page'] is not None:
            _header_params['Paging-Page'] = _params['paging_page']

        if _params['paging_page_size'] is not None:
            _header_params['Paging-PageSize'] = _params['paging_page_size']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "List[DeviceModel]",
            '403': None,
            '404': None,
            '422': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/devices', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def devices_sync_put(self, sync_device_info_request : Annotated[Optional[SyncDeviceInfoRequest], Field(description="Dati del dispositivo.")] = None, **kwargs) -> None:  # noqa: E501
        """Sincronizza dispositivo  # noqa: E501

        Sincronizza le informazioni del dispositivo specificato e dell'app installata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_sync_put(sync_device_info_request, async_req=True)
        >>> result = thread.get()

        :param sync_device_info_request: Dati del dispositivo.
        :type sync_device_info_request: SyncDeviceInfoRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the devices_sync_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.devices_sync_put_with_http_info(sync_device_info_request, **kwargs)  # noqa: E501

    @validate_arguments
    def devices_sync_put_with_http_info(self, sync_device_info_request : Annotated[Optional[SyncDeviceInfoRequest], Field(description="Dati del dispositivo.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Sincronizza dispositivo  # noqa: E501

        Sincronizza le informazioni del dispositivo specificato e dell'app installata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.devices_sync_put_with_http_info(sync_device_info_request, async_req=True)
        >>> result = thread.get()

        :param sync_device_info_request: Dati del dispositivo.
        :type sync_device_info_request: SyncDeviceInfoRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'sync_device_info_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_sync_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['sync_device_info_request'] is not None:
            _body_params = _params['sync_device_info_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/problem+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/devices/sync', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
