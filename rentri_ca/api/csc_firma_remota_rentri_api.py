# coding: utf-8

"""
    ca-rentri

    Servizio RENTRI CA

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictStr, constr

from typing import Any, Optional

from rentri_ca.models.create_update_credentials_request import CreateUpdateCredentialsRequest
from rentri_ca.models.create_update_credentials_response import CreateUpdateCredentialsResponse
from rentri_ca.models.credentials_authorize_confirmation_request import CredentialsAuthorizeConfirmationRequest
from rentri_ca.models.credentials_authorize_request import CredentialsAuthorizeRequest
from rentri_ca.models.credentials_authorize_response import CredentialsAuthorizeResponse
from rentri_ca.models.credentials_info_response import CredentialsInfoResponse
from rentri_ca.models.credentials_list_response import CredentialsListResponse
from rentri_ca.models.info_data import InfoData
from rentri_ca.models.signature_request import SignatureRequest
from rentri_ca.models.signature_response import SignatureResponse

from rentri_ca.api_client import ApiClient
from rentri_ca.api_response import ApiResponse
from rentri_ca.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class CSCFirmaRemotaRENTRIApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def credentials_authorize_check_handle_get(self, handle : Annotated[StrictStr, Field(..., description="Handle del SAD per verificare lo stato di autorizzazione della richiesta.")], **kwargs) -> CredentialsAuthorizeResponse:  # noqa: E501
        """Verifica autorizzazione credenziali  # noqa: E501

        Verifica lo stato dell'autorizzazione delle credenziali.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_authorize_check_handle_get(handle, async_req=True)
        >>> result = thread.get()

        :param handle: Handle del SAD per verificare lo stato di autorizzazione della richiesta. (required)
        :type handle: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CredentialsAuthorizeResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the credentials_authorize_check_handle_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.credentials_authorize_check_handle_get_with_http_info(handle, **kwargs)  # noqa: E501

    @validate_arguments
    def credentials_authorize_check_handle_get_with_http_info(self, handle : Annotated[StrictStr, Field(..., description="Handle del SAD per verificare lo stato di autorizzazione della richiesta.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Verifica autorizzazione credenziali  # noqa: E501

        Verifica lo stato dell'autorizzazione delle credenziali.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_authorize_check_handle_get_with_http_info(handle, async_req=True)
        >>> result = thread.get()

        :param handle: Handle del SAD per verificare lo stato di autorizzazione della richiesta. (required)
        :type handle: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CredentialsAuthorizeResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'handle'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method credentials_authorize_check_handle_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['handle'] is not None:
            _path_params['handle'] = _params['handle']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "CredentialsAuthorizeResponse",
            '202': "CredentialsAuthorizeResponse",
            '400': None,
            '403': None,
            '422': None,
            '429': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/credentials/authorize-check/{handle}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def credentials_authorize_check_handle_get_0(self, handle : Annotated[StrictStr, Field(..., description="Handle del SAD per verificare lo stato di autorizzazione della richiesta.")], **kwargs) -> CredentialsAuthorizeResponse:  # noqa: E501
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /credentials/authorize-check/{handle} - Verifica autorizzazione credenziali  # noqa: E501

        Verifica lo stato dell'autorizzazione delle credenziali.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_authorize_check_handle_get_0(handle, async_req=True)
        >>> result = thread.get()

        :param handle: Handle del SAD per verificare lo stato di autorizzazione della richiesta. (required)
        :type handle: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CredentialsAuthorizeResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the credentials_authorize_check_handle_get_0_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.credentials_authorize_check_handle_get_0_with_http_info(handle, **kwargs)  # noqa: E501

    @validate_arguments
    def credentials_authorize_check_handle_get_0_with_http_info(self, handle : Annotated[StrictStr, Field(..., description="Handle del SAD per verificare lo stato di autorizzazione della richiesta.")], **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /credentials/authorize-check/{handle} - Verifica autorizzazione credenziali  # noqa: E501

        Verifica lo stato dell'autorizzazione delle credenziali.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_authorize_check_handle_get_0_with_http_info(handle, async_req=True)
        >>> result = thread.get()

        :param handle: Handle del SAD per verificare lo stato di autorizzazione della richiesta. (required)
        :type handle: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CredentialsAuthorizeResponse, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn("GET /credentials/authorizeCheck/{handle} is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'handle'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method credentials_authorize_check_handle_get_0" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['handle'] is not None:
            _path_params['handle'] = _params['handle']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "CredentialsAuthorizeResponse",
            '202': "CredentialsAuthorizeResponse",
            '400': None,
            '403': None,
            '422': None,
            '429': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/credentials/authorizeCheck/{handle}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def credentials_authorize_confirmation_put(self, credentials_authorize_confirmation_request : Annotated[Optional[CredentialsAuthorizeConfirmationRequest], Field(description="Dati per l'impostazione dell'autorizzazione.")] = None, **kwargs) -> None:  # noqa: E501
        """Imposta autorizzazione credenziali  # noqa: E501

        Imposta lo stato di una richiesta di autorizzazione delle credenziali.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_authorize_confirmation_put(credentials_authorize_confirmation_request, async_req=True)
        >>> result = thread.get()

        :param credentials_authorize_confirmation_request: Dati per l'impostazione dell'autorizzazione.
        :type credentials_authorize_confirmation_request: CredentialsAuthorizeConfirmationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the credentials_authorize_confirmation_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.credentials_authorize_confirmation_put_with_http_info(credentials_authorize_confirmation_request, **kwargs)  # noqa: E501

    @validate_arguments
    def credentials_authorize_confirmation_put_with_http_info(self, credentials_authorize_confirmation_request : Annotated[Optional[CredentialsAuthorizeConfirmationRequest], Field(description="Dati per l'impostazione dell'autorizzazione.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Imposta autorizzazione credenziali  # noqa: E501

        Imposta lo stato di una richiesta di autorizzazione delle credenziali.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_authorize_confirmation_put_with_http_info(credentials_authorize_confirmation_request, async_req=True)
        >>> result = thread.get()

        :param credentials_authorize_confirmation_request: Dati per l'impostazione dell'autorizzazione.
        :type credentials_authorize_confirmation_request: CredentialsAuthorizeConfirmationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'credentials_authorize_confirmation_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method credentials_authorize_confirmation_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['credentials_authorize_confirmation_request'] is not None:
            _body_params = _params['credentials_authorize_confirmation_request']

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/credentials/authorize-confirmation', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def credentials_authorize_confirmation_put_0(self, credentials_authorize_confirmation_request : Annotated[Optional[CredentialsAuthorizeConfirmationRequest], Field(description="Dati per l'impostazione dell'autorizzazione.")] = None, **kwargs) -> None:  # noqa: E501
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /credentials/authorize-confirmation - Imposta autorizzazione credenziali  # noqa: E501

        Imposta lo stato di una richiesta di autorizzazione delle credenziali.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_authorize_confirmation_put_0(credentials_authorize_confirmation_request, async_req=True)
        >>> result = thread.get()

        :param credentials_authorize_confirmation_request: Dati per l'impostazione dell'autorizzazione.
        :type credentials_authorize_confirmation_request: CredentialsAuthorizeConfirmationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the credentials_authorize_confirmation_put_0_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.credentials_authorize_confirmation_put_0_with_http_info(credentials_authorize_confirmation_request, **kwargs)  # noqa: E501

    @validate_arguments
    def credentials_authorize_confirmation_put_0_with_http_info(self, credentials_authorize_confirmation_request : Annotated[Optional[CredentialsAuthorizeConfirmationRequest], Field(description="Dati per l'impostazione dell'autorizzazione.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /credentials/authorize-confirmation - Imposta autorizzazione credenziali  # noqa: E501

        Imposta lo stato di una richiesta di autorizzazione delle credenziali.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_authorize_confirmation_put_0_with_http_info(credentials_authorize_confirmation_request, async_req=True)
        >>> result = thread.get()

        :param credentials_authorize_confirmation_request: Dati per l'impostazione dell'autorizzazione.
        :type credentials_authorize_confirmation_request: CredentialsAuthorizeConfirmationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        warnings.warn("PUT /credentials/authorizeConfirmation is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'credentials_authorize_confirmation_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method credentials_authorize_confirmation_put_0" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['credentials_authorize_confirmation_request'] is not None:
            _body_params = _params['credentials_authorize_confirmation_request']

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/credentials/authorizeConfirmation', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def credentials_authorize_post(self, credentials_authorize_request : Annotated[Optional[CredentialsAuthorizeRequest], Field(description="Dati delle credenziali da autorizzare.")] = None, **kwargs) -> CredentialsAuthorizeResponse:  # noqa: E501
        """Autorizza credenziali  # noqa: E501

        Autorizza l'accesso alle credenziali per la firma.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_authorize_post(credentials_authorize_request, async_req=True)
        >>> result = thread.get()

        :param credentials_authorize_request: Dati delle credenziali da autorizzare.
        :type credentials_authorize_request: CredentialsAuthorizeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CredentialsAuthorizeResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the credentials_authorize_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.credentials_authorize_post_with_http_info(credentials_authorize_request, **kwargs)  # noqa: E501

    @validate_arguments
    def credentials_authorize_post_with_http_info(self, credentials_authorize_request : Annotated[Optional[CredentialsAuthorizeRequest], Field(description="Dati delle credenziali da autorizzare.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Autorizza credenziali  # noqa: E501

        Autorizza l'accesso alle credenziali per la firma.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_authorize_post_with_http_info(credentials_authorize_request, async_req=True)
        >>> result = thread.get()

        :param credentials_authorize_request: Dati delle credenziali da autorizzare.
        :type credentials_authorize_request: CredentialsAuthorizeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CredentialsAuthorizeResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'credentials_authorize_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method credentials_authorize_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['credentials_authorize_request'] is not None:
            _body_params = _params['credentials_authorize_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "CredentialsAuthorizeResponse",
            '400': None,
            '403': None,
            '404': None,
            '422': None,
            '429': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/credentials/authorize', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def credentials_info_get(self, credentials_id : Annotated[constr(strict=True, max_length=9, min_length=9), Field(..., description="Identificativo delle credenziali.")], certificates : Annotated[Optional[Any], Field(description="Specifica quali certificati dalla catena devono essere restituiti. - none: nessuno - single: solo il certificato dell'identità finale - chain: l'intera catena dei certificati")] = None, cert_info : Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta anche i parametri contenenti informazioni relative al certificato.")] = None, auth_info : Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta anche i parametri contenenti informazioni sul meccanismo di autorizzazione supportato dalle credenziali.")] = None, lang : Annotated[Optional[StrictStr], Field(description="Lingua prescelta per la risposta, specificata secondo RFC 5646.")] = None, client_data : Annotated[Optional[StrictStr], Field(description="Dati arbitrari dell'applicazione di firma.")] = None, **kwargs) -> CredentialsInfoResponse:  # noqa: E501
        """Informazioni credenziali  # noqa: E501

        Ottiene le informazioni sull'identità principale ed il certificato (o la catena di certificati) ad esso associata.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_info_get(credentials_id, certificates, cert_info, auth_info, lang, client_data, async_req=True)
        >>> result = thread.get()

        :param credentials_id: Identificativo delle credenziali. (required)
        :type credentials_id: str
        :param certificates: Specifica quali certificati dalla catena devono essere restituiti. - none: nessuno - single: solo il certificato dell'identità finale - chain: l'intera catena dei certificati
        :type certificates: CredentialsCertificate
        :param cert_info: Indica se includere nella risposta anche i parametri contenenti informazioni relative al certificato.
        :type cert_info: bool
        :param auth_info: Indica se includere nella risposta anche i parametri contenenti informazioni sul meccanismo di autorizzazione supportato dalle credenziali.
        :type auth_info: bool
        :param lang: Lingua prescelta per la risposta, specificata secondo RFC 5646.
        :type lang: str
        :param client_data: Dati arbitrari dell'applicazione di firma.
        :type client_data: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CredentialsInfoResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the credentials_info_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.credentials_info_get_with_http_info(credentials_id, certificates, cert_info, auth_info, lang, client_data, **kwargs)  # noqa: E501

    @validate_arguments
    def credentials_info_get_with_http_info(self, credentials_id : Annotated[constr(strict=True, max_length=9, min_length=9), Field(..., description="Identificativo delle credenziali.")], certificates : Annotated[Optional[Any], Field(description="Specifica quali certificati dalla catena devono essere restituiti. - none: nessuno - single: solo il certificato dell'identità finale - chain: l'intera catena dei certificati")] = None, cert_info : Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta anche i parametri contenenti informazioni relative al certificato.")] = None, auth_info : Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta anche i parametri contenenti informazioni sul meccanismo di autorizzazione supportato dalle credenziali.")] = None, lang : Annotated[Optional[StrictStr], Field(description="Lingua prescelta per la risposta, specificata secondo RFC 5646.")] = None, client_data : Annotated[Optional[StrictStr], Field(description="Dati arbitrari dell'applicazione di firma.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Informazioni credenziali  # noqa: E501

        Ottiene le informazioni sull'identità principale ed il certificato (o la catena di certificati) ad esso associata.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_info_get_with_http_info(credentials_id, certificates, cert_info, auth_info, lang, client_data, async_req=True)
        >>> result = thread.get()

        :param credentials_id: Identificativo delle credenziali. (required)
        :type credentials_id: str
        :param certificates: Specifica quali certificati dalla catena devono essere restituiti. - none: nessuno - single: solo il certificato dell'identità finale - chain: l'intera catena dei certificati
        :type certificates: CredentialsCertificate
        :param cert_info: Indica se includere nella risposta anche i parametri contenenti informazioni relative al certificato.
        :type cert_info: bool
        :param auth_info: Indica se includere nella risposta anche i parametri contenenti informazioni sul meccanismo di autorizzazione supportato dalle credenziali.
        :type auth_info: bool
        :param lang: Lingua prescelta per la risposta, specificata secondo RFC 5646.
        :type lang: str
        :param client_data: Dati arbitrari dell'applicazione di firma.
        :type client_data: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CredentialsInfoResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'credentials_id',
            'certificates',
            'cert_info',
            'auth_info',
            'lang',
            'client_data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method credentials_info_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('credentials_id') is not None:  # noqa: E501
            _query_params.append(('credentials_id', _params['credentials_id']))

        if _params.get('certificates') is not None:  # noqa: E501
            _query_params.append(('certificates', _params['certificates'].value))

        if _params.get('cert_info') is not None:  # noqa: E501
            _query_params.append(('cert_info', _params['cert_info']))

        if _params.get('auth_info') is not None:  # noqa: E501
            _query_params.append(('auth_info', _params['auth_info']))

        if _params.get('lang') is not None:  # noqa: E501
            _query_params.append(('lang', _params['lang']))

        if _params.get('client_data') is not None:  # noqa: E501
            _query_params.append(('client_data', _params['client_data']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "CredentialsInfoResponse",
            '400': None,
            '403': None,
            '404': None,
            '429': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/credentials/info', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def credentials_list_get(self, identificativo_soggetto : Annotated[StrictStr, Field(..., description="Codice Fiscale di un Operatore iscritto.")], user_name : Annotated[Optional[constr(strict=True, max_length=256)], Field(description="Identificativo dell'utente (da SPID, CIE, CNS).")] = None, credential_info : Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta anche le informazioni relative alla chiave pubblica del certificato ed il certificato stesso, oppure la catena di certificati associata alle credenziali.")] = None, only_valid : Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta solo credenziali utilizzabili per creare una firma valida.")] = None, certificates : Annotated[Optional[Any], Field(description="Specifica quali certificati dalla catena devono essere restituiti. - none: nessuno - single: solo il certificato dell'identità finale - chain: l'intera catena dei certificati")] = None, cert_info : Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta anche i parametri contenenti informazioni relative al certificato.")] = None, auth_info : Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta anche i parametri contenenti informazioni sul meccanismo di autorizzazione supportato dalle credenziali.")] = None, lang : Annotated[Optional[StrictStr], Field(description="Lingua prescelta per la risposta, specificata secondo RFC 5646.")] = None, client_data : Annotated[Optional[StrictStr], Field(description="Dati arbitrari dell'applicazione di firma.")] = None, **kwargs) -> CredentialsListResponse:  # noqa: E501
        """Elenco credenziali soggetto  # noqa: E501

        Ottiene l'elenco delle credenziali associate ad un soggetto.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_list_get(identificativo_soggetto, user_name, credential_info, only_valid, certificates, cert_info, auth_info, lang, client_data, async_req=True)
        >>> result = thread.get()

        :param identificativo_soggetto: Codice Fiscale di un Operatore iscritto. (required)
        :type identificativo_soggetto: str
        :param user_name: Identificativo dell'utente (da SPID, CIE, CNS).
        :type user_name: str
        :param credential_info: Indica se includere nella risposta anche le informazioni relative alla chiave pubblica del certificato ed il certificato stesso, oppure la catena di certificati associata alle credenziali.
        :type credential_info: bool
        :param only_valid: Indica se includere nella risposta solo credenziali utilizzabili per creare una firma valida.
        :type only_valid: bool
        :param certificates: Specifica quali certificati dalla catena devono essere restituiti. - none: nessuno - single: solo il certificato dell'identità finale - chain: l'intera catena dei certificati
        :type certificates: CredentialsCertificate
        :param cert_info: Indica se includere nella risposta anche i parametri contenenti informazioni relative al certificato.
        :type cert_info: bool
        :param auth_info: Indica se includere nella risposta anche i parametri contenenti informazioni sul meccanismo di autorizzazione supportato dalle credenziali.
        :type auth_info: bool
        :param lang: Lingua prescelta per la risposta, specificata secondo RFC 5646.
        :type lang: str
        :param client_data: Dati arbitrari dell'applicazione di firma.
        :type client_data: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CredentialsListResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the credentials_list_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.credentials_list_get_with_http_info(identificativo_soggetto, user_name, credential_info, only_valid, certificates, cert_info, auth_info, lang, client_data, **kwargs)  # noqa: E501

    @validate_arguments
    def credentials_list_get_with_http_info(self, identificativo_soggetto : Annotated[StrictStr, Field(..., description="Codice Fiscale di un Operatore iscritto.")], user_name : Annotated[Optional[constr(strict=True, max_length=256)], Field(description="Identificativo dell'utente (da SPID, CIE, CNS).")] = None, credential_info : Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta anche le informazioni relative alla chiave pubblica del certificato ed il certificato stesso, oppure la catena di certificati associata alle credenziali.")] = None, only_valid : Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta solo credenziali utilizzabili per creare una firma valida.")] = None, certificates : Annotated[Optional[Any], Field(description="Specifica quali certificati dalla catena devono essere restituiti. - none: nessuno - single: solo il certificato dell'identità finale - chain: l'intera catena dei certificati")] = None, cert_info : Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta anche i parametri contenenti informazioni relative al certificato.")] = None, auth_info : Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta anche i parametri contenenti informazioni sul meccanismo di autorizzazione supportato dalle credenziali.")] = None, lang : Annotated[Optional[StrictStr], Field(description="Lingua prescelta per la risposta, specificata secondo RFC 5646.")] = None, client_data : Annotated[Optional[StrictStr], Field(description="Dati arbitrari dell'applicazione di firma.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Elenco credenziali soggetto  # noqa: E501

        Ottiene l'elenco delle credenziali associate ad un soggetto.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_list_get_with_http_info(identificativo_soggetto, user_name, credential_info, only_valid, certificates, cert_info, auth_info, lang, client_data, async_req=True)
        >>> result = thread.get()

        :param identificativo_soggetto: Codice Fiscale di un Operatore iscritto. (required)
        :type identificativo_soggetto: str
        :param user_name: Identificativo dell'utente (da SPID, CIE, CNS).
        :type user_name: str
        :param credential_info: Indica se includere nella risposta anche le informazioni relative alla chiave pubblica del certificato ed il certificato stesso, oppure la catena di certificati associata alle credenziali.
        :type credential_info: bool
        :param only_valid: Indica se includere nella risposta solo credenziali utilizzabili per creare una firma valida.
        :type only_valid: bool
        :param certificates: Specifica quali certificati dalla catena devono essere restituiti. - none: nessuno - single: solo il certificato dell'identità finale - chain: l'intera catena dei certificati
        :type certificates: CredentialsCertificate
        :param cert_info: Indica se includere nella risposta anche i parametri contenenti informazioni relative al certificato.
        :type cert_info: bool
        :param auth_info: Indica se includere nella risposta anche i parametri contenenti informazioni sul meccanismo di autorizzazione supportato dalle credenziali.
        :type auth_info: bool
        :param lang: Lingua prescelta per la risposta, specificata secondo RFC 5646.
        :type lang: str
        :param client_data: Dati arbitrari dell'applicazione di firma.
        :type client_data: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CredentialsListResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'identificativo_soggetto',
            'user_name',
            'credential_info',
            'only_valid',
            'certificates',
            'cert_info',
            'auth_info',
            'lang',
            'client_data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method credentials_list_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('identificativo_soggetto') is not None:  # noqa: E501
            _query_params.append(('identificativo_soggetto', _params['identificativo_soggetto']))

        if _params.get('user_name') is not None:  # noqa: E501
            _query_params.append(('user_name', _params['user_name']))

        if _params.get('credential_info') is not None:  # noqa: E501
            _query_params.append(('credential_info', _params['credential_info']))

        if _params.get('only_valid') is not None:  # noqa: E501
            _query_params.append(('only_valid', _params['only_valid']))

        if _params.get('certificates') is not None:  # noqa: E501
            _query_params.append(('certificates', _params['certificates'].value))

        if _params.get('cert_info') is not None:  # noqa: E501
            _query_params.append(('cert_info', _params['cert_info']))

        if _params.get('auth_info') is not None:  # noqa: E501
            _query_params.append(('auth_info', _params['auth_info']))

        if _params.get('lang') is not None:  # noqa: E501
            _query_params.append(('lang', _params['lang']))

        if _params.get('client_data') is not None:  # noqa: E501
            _query_params.append(('client_data', _params['client_data']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "CredentialsListResponse",
            '400': None,
            '403': None,
            '404': None,
            '429': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/credentials/list', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def credentials_post(self, create_update_credentials_request : Annotated[Optional[CreateUpdateCredentialsRequest], Field(description="Dati delle credenziali.")] = None, **kwargs) -> CreateUpdateCredentialsResponse:  # noqa: E501
        """Crea/aggiorna credenziali  # noqa: E501

        Crea delle nuove credenziali associate al soggetto e al dispositivo specificati, oppure aggiorna le informazioni associate a credenziali esistenti.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_post(create_update_credentials_request, async_req=True)
        >>> result = thread.get()

        :param create_update_credentials_request: Dati delle credenziali.
        :type create_update_credentials_request: CreateUpdateCredentialsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateUpdateCredentialsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the credentials_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.credentials_post_with_http_info(create_update_credentials_request, **kwargs)  # noqa: E501

    @validate_arguments
    def credentials_post_with_http_info(self, create_update_credentials_request : Annotated[Optional[CreateUpdateCredentialsRequest], Field(description="Dati delle credenziali.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Crea/aggiorna credenziali  # noqa: E501

        Crea delle nuove credenziali associate al soggetto e al dispositivo specificati, oppure aggiorna le informazioni associate a credenziali esistenti.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_post_with_http_info(create_update_credentials_request, async_req=True)
        >>> result = thread.get()

        :param create_update_credentials_request: Dati delle credenziali.
        :type create_update_credentials_request: CreateUpdateCredentialsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateUpdateCredentialsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'create_update_credentials_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method credentials_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_update_credentials_request'] is not None:
            _body_params = _params['create_update_credentials_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '201': "CreateUpdateCredentialsResponse",
            '400': None,
            '403': None,
            '422': None,
            '429': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/credentials', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def info_get(self, lang : Annotated[Optional[StrictStr], Field(description="Lingua prescelta per la risposta, specificata secondo RFC 5646.")] = None, **kwargs) -> InfoData:  # noqa: E501
        """Info servizio  # noqa: E501

        Restituisce informazioni sul servizio e l'elenco dei metodi API implementati.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.info_get(lang, async_req=True)
        >>> result = thread.get()

        :param lang: Lingua prescelta per la risposta, specificata secondo RFC 5646.
        :type lang: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InfoData
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the info_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.info_get_with_http_info(lang, **kwargs)  # noqa: E501

    @validate_arguments
    def info_get_with_http_info(self, lang : Annotated[Optional[StrictStr], Field(description="Lingua prescelta per la risposta, specificata secondo RFC 5646.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Info servizio  # noqa: E501

        Restituisce informazioni sul servizio e l'elenco dei metodi API implementati.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.info_get_with_http_info(lang, async_req=True)
        >>> result = thread.get()

        :param lang: Lingua prescelta per la risposta, specificata secondo RFC 5646.
        :type lang: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InfoData, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'lang'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method info_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('lang') is not None:  # noqa: E501
            _query_params.append(('lang', _params['lang']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "InfoData",
            '429': None,
        }

        return self.api_client.call_api(
            '/info', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def signatures_sign_hash_post(self, signature_request : Optional[SignatureRequest] = None, **kwargs) -> SignatureResponse:  # noqa: E501
        """Firma hash  # noqa: E501

        Calcola la firma di uno o più hash specificati.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.signatures_sign_hash_post(signature_request, async_req=True)
        >>> result = thread.get()

        :param signature_request: 
        :type signature_request: SignatureRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SignatureResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the signatures_sign_hash_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.signatures_sign_hash_post_with_http_info(signature_request, **kwargs)  # noqa: E501

    @validate_arguments
    def signatures_sign_hash_post_with_http_info(self, signature_request : Optional[SignatureRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Firma hash  # noqa: E501

        Calcola la firma di uno o più hash specificati.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.signatures_sign_hash_post_with_http_info(signature_request, async_req=True)
        >>> result = thread.get()

        :param signature_request: 
        :type signature_request: SignatureRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SignatureResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'signature_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method signatures_sign_hash_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['signature_request'] is not None:
            _body_params = _params['signature_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "SignatureResponse",
            '400': None,
            '403': None,
            '422': None,
            '429': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/signatures/sign-hash', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def signatures_sign_hash_post_0(self, signature_request : Optional[SignatureRequest] = None, **kwargs) -> SignatureResponse:  # noqa: E501
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /signatures/sign-hash - Firma hash  # noqa: E501

        Calcola la firma di uno o più hash specificati.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.signatures_sign_hash_post_0(signature_request, async_req=True)
        >>> result = thread.get()

        :param signature_request: 
        :type signature_request: SignatureRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SignatureResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the signatures_sign_hash_post_0_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.signatures_sign_hash_post_0_with_http_info(signature_request, **kwargs)  # noqa: E501

    @validate_arguments
    def signatures_sign_hash_post_0_with_http_info(self, signature_request : Optional[SignatureRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /signatures/sign-hash - Firma hash  # noqa: E501

        Calcola la firma di uno o più hash specificati.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.signatures_sign_hash_post_0_with_http_info(signature_request, async_req=True)
        >>> result = thread.get()

        :param signature_request: 
        :type signature_request: SignatureRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SignatureResponse, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn("POST /signatures/signHash is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'signature_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method signatures_sign_hash_post_0" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['signature_request'] is not None:
            _body_params = _params['signature_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "SignatureResponse",
            '400': None,
            '403': None,
            '422': None,
            '429': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/signatures/signHash', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
