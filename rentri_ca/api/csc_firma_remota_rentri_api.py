# coding: utf-8

"""
    ca-rentri

    Servizio RENTRI CA

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr
from typing import Any, Optional
from typing_extensions import Annotated
from rentri_ca.models.create_update_credentials_request import CreateUpdateCredentialsRequest
from rentri_ca.models.create_update_credentials_response import CreateUpdateCredentialsResponse
from rentri_ca.models.credentials_authorize_confirmation_request import CredentialsAuthorizeConfirmationRequest
from rentri_ca.models.credentials_authorize_request import CredentialsAuthorizeRequest
from rentri_ca.models.credentials_authorize_response import CredentialsAuthorizeResponse
from rentri_ca.models.credentials_info_response import CredentialsInfoResponse
from rentri_ca.models.credentials_list_response import CredentialsListResponse
from rentri_ca.models.info_data import InfoData
from rentri_ca.models.signature_request import SignatureRequest
from rentri_ca.models.signature_response import SignatureResponse

from rentri_ca.api_client import ApiClient, RequestSerialized
from rentri_ca.api_response import ApiResponse
from rentri_ca.rest import RESTResponseType


class CSCFirmaRemotaRENTRIApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def credentials_authorize_check_handle_get(
        self,
        handle: Annotated[StrictStr, Field(description="Handle del SAD per verificare lo stato di autorizzazione della richiesta.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CredentialsAuthorizeResponse:
        """Verifica autorizzazione credenziali

        Verifica lo stato dell'autorizzazione delle credenziali.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.

        :param handle: Handle del SAD per verificare lo stato di autorizzazione della richiesta. (required)
        :type handle: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._credentials_authorize_check_handle_get_serialize(
            handle=handle,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CredentialsAuthorizeResponse",
            '202': "CredentialsAuthorizeResponse",
            '400': None,
            '403': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def credentials_authorize_check_handle_get_with_http_info(
        self,
        handle: Annotated[StrictStr, Field(description="Handle del SAD per verificare lo stato di autorizzazione della richiesta.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CredentialsAuthorizeResponse]:
        """Verifica autorizzazione credenziali

        Verifica lo stato dell'autorizzazione delle credenziali.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.

        :param handle: Handle del SAD per verificare lo stato di autorizzazione della richiesta. (required)
        :type handle: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._credentials_authorize_check_handle_get_serialize(
            handle=handle,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CredentialsAuthorizeResponse",
            '202': "CredentialsAuthorizeResponse",
            '400': None,
            '403': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def credentials_authorize_check_handle_get_without_preload_content(
        self,
        handle: Annotated[StrictStr, Field(description="Handle del SAD per verificare lo stato di autorizzazione della richiesta.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Verifica autorizzazione credenziali

        Verifica lo stato dell'autorizzazione delle credenziali.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.

        :param handle: Handle del SAD per verificare lo stato di autorizzazione della richiesta. (required)
        :type handle: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._credentials_authorize_check_handle_get_serialize(
            handle=handle,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CredentialsAuthorizeResponse",
            '202': "CredentialsAuthorizeResponse",
            '400': None,
            '403': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _credentials_authorize_check_handle_get_serialize(
        self,
        handle,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if handle is not None:
            _path_params['handle'] = handle
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/credentials/authorize-check/{handle}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def credentials_authorize_check_handle_get_0(
        self,
        handle: Annotated[StrictStr, Field(description="Handle del SAD per verificare lo stato di autorizzazione della richiesta.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CredentialsAuthorizeResponse:
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /credentials/authorize-check/{handle} - Verifica autorizzazione credenziali

        Verifica lo stato dell'autorizzazione delle credenziali.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.

        :param handle: Handle del SAD per verificare lo stato di autorizzazione della richiesta. (required)
        :type handle: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /credentials/authorizeCheck/{handle} is deprecated.", DeprecationWarning)

        _param = self._credentials_authorize_check_handle_get_0_serialize(
            handle=handle,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CredentialsAuthorizeResponse",
            '202': "CredentialsAuthorizeResponse",
            '400': None,
            '403': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def credentials_authorize_check_handle_get_0_with_http_info(
        self,
        handle: Annotated[StrictStr, Field(description="Handle del SAD per verificare lo stato di autorizzazione della richiesta.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CredentialsAuthorizeResponse]:
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /credentials/authorize-check/{handle} - Verifica autorizzazione credenziali

        Verifica lo stato dell'autorizzazione delle credenziali.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.

        :param handle: Handle del SAD per verificare lo stato di autorizzazione della richiesta. (required)
        :type handle: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /credentials/authorizeCheck/{handle} is deprecated.", DeprecationWarning)

        _param = self._credentials_authorize_check_handle_get_0_serialize(
            handle=handle,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CredentialsAuthorizeResponse",
            '202': "CredentialsAuthorizeResponse",
            '400': None,
            '403': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def credentials_authorize_check_handle_get_0_without_preload_content(
        self,
        handle: Annotated[StrictStr, Field(description="Handle del SAD per verificare lo stato di autorizzazione della richiesta.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /credentials/authorize-check/{handle} - Verifica autorizzazione credenziali

        Verifica lo stato dell'autorizzazione delle credenziali.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.

        :param handle: Handle del SAD per verificare lo stato di autorizzazione della richiesta. (required)
        :type handle: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /credentials/authorizeCheck/{handle} is deprecated.", DeprecationWarning)

        _param = self._credentials_authorize_check_handle_get_0_serialize(
            handle=handle,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CredentialsAuthorizeResponse",
            '202': "CredentialsAuthorizeResponse",
            '400': None,
            '403': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _credentials_authorize_check_handle_get_0_serialize(
        self,
        handle,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if handle is not None:
            _path_params['handle'] = handle
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/credentials/authorizeCheck/{handle}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def credentials_authorize_confirmation_put(
        self,
        credentials_authorize_confirmation_request: Annotated[Optional[CredentialsAuthorizeConfirmationRequest], Field(description="Dati per l'impostazione dell'autorizzazione.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Imposta autorizzazione credenziali

        Imposta lo stato di una richiesta di autorizzazione delle credenziali.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.

        :param credentials_authorize_confirmation_request: Dati per l'impostazione dell'autorizzazione.
        :type credentials_authorize_confirmation_request: CredentialsAuthorizeConfirmationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._credentials_authorize_confirmation_put_serialize(
            credentials_authorize_confirmation_request=credentials_authorize_confirmation_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': None,
            '403': None,
            '404': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def credentials_authorize_confirmation_put_with_http_info(
        self,
        credentials_authorize_confirmation_request: Annotated[Optional[CredentialsAuthorizeConfirmationRequest], Field(description="Dati per l'impostazione dell'autorizzazione.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Imposta autorizzazione credenziali

        Imposta lo stato di una richiesta di autorizzazione delle credenziali.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.

        :param credentials_authorize_confirmation_request: Dati per l'impostazione dell'autorizzazione.
        :type credentials_authorize_confirmation_request: CredentialsAuthorizeConfirmationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._credentials_authorize_confirmation_put_serialize(
            credentials_authorize_confirmation_request=credentials_authorize_confirmation_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': None,
            '403': None,
            '404': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def credentials_authorize_confirmation_put_without_preload_content(
        self,
        credentials_authorize_confirmation_request: Annotated[Optional[CredentialsAuthorizeConfirmationRequest], Field(description="Dati per l'impostazione dell'autorizzazione.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Imposta autorizzazione credenziali

        Imposta lo stato di una richiesta di autorizzazione delle credenziali.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.

        :param credentials_authorize_confirmation_request: Dati per l'impostazione dell'autorizzazione.
        :type credentials_authorize_confirmation_request: CredentialsAuthorizeConfirmationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._credentials_authorize_confirmation_put_serialize(
            credentials_authorize_confirmation_request=credentials_authorize_confirmation_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': None,
            '403': None,
            '404': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _credentials_authorize_confirmation_put_serialize(
        self,
        credentials_authorize_confirmation_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if credentials_authorize_confirmation_request is not None:
            _body_params = credentials_authorize_confirmation_request



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/credentials/authorize-confirmation',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def credentials_authorize_confirmation_put_0(
        self,
        credentials_authorize_confirmation_request: Annotated[Optional[CredentialsAuthorizeConfirmationRequest], Field(description="Dati per l'impostazione dell'autorizzazione.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /credentials/authorize-confirmation - Imposta autorizzazione credenziali

        Imposta lo stato di una richiesta di autorizzazione delle credenziali.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.

        :param credentials_authorize_confirmation_request: Dati per l'impostazione dell'autorizzazione.
        :type credentials_authorize_confirmation_request: CredentialsAuthorizeConfirmationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PUT /credentials/authorizeConfirmation is deprecated.", DeprecationWarning)

        _param = self._credentials_authorize_confirmation_put_0_serialize(
            credentials_authorize_confirmation_request=credentials_authorize_confirmation_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': None,
            '403': None,
            '404': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def credentials_authorize_confirmation_put_0_with_http_info(
        self,
        credentials_authorize_confirmation_request: Annotated[Optional[CredentialsAuthorizeConfirmationRequest], Field(description="Dati per l'impostazione dell'autorizzazione.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /credentials/authorize-confirmation - Imposta autorizzazione credenziali

        Imposta lo stato di una richiesta di autorizzazione delle credenziali.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.

        :param credentials_authorize_confirmation_request: Dati per l'impostazione dell'autorizzazione.
        :type credentials_authorize_confirmation_request: CredentialsAuthorizeConfirmationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PUT /credentials/authorizeConfirmation is deprecated.", DeprecationWarning)

        _param = self._credentials_authorize_confirmation_put_0_serialize(
            credentials_authorize_confirmation_request=credentials_authorize_confirmation_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': None,
            '403': None,
            '404': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def credentials_authorize_confirmation_put_0_without_preload_content(
        self,
        credentials_authorize_confirmation_request: Annotated[Optional[CredentialsAuthorizeConfirmationRequest], Field(description="Dati per l'impostazione dell'autorizzazione.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /credentials/authorize-confirmation - Imposta autorizzazione credenziali

        Imposta lo stato di una richiesta di autorizzazione delle credenziali.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.

        :param credentials_authorize_confirmation_request: Dati per l'impostazione dell'autorizzazione.
        :type credentials_authorize_confirmation_request: CredentialsAuthorizeConfirmationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PUT /credentials/authorizeConfirmation is deprecated.", DeprecationWarning)

        _param = self._credentials_authorize_confirmation_put_0_serialize(
            credentials_authorize_confirmation_request=credentials_authorize_confirmation_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '400': None,
            '403': None,
            '404': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _credentials_authorize_confirmation_put_0_serialize(
        self,
        credentials_authorize_confirmation_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if credentials_authorize_confirmation_request is not None:
            _body_params = credentials_authorize_confirmation_request



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/credentials/authorizeConfirmation',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def credentials_authorize_post(
        self,
        credentials_authorize_request: Annotated[Optional[CredentialsAuthorizeRequest], Field(description="Dati delle credenziali da autorizzare.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CredentialsAuthorizeResponse:
        """Autorizza credenziali

        Autorizza l'accesso alle credenziali per la firma.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.

        :param credentials_authorize_request: Dati delle credenziali da autorizzare.
        :type credentials_authorize_request: CredentialsAuthorizeRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._credentials_authorize_post_serialize(
            credentials_authorize_request=credentials_authorize_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CredentialsAuthorizeResponse",
            '400': None,
            '403': None,
            '404': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def credentials_authorize_post_with_http_info(
        self,
        credentials_authorize_request: Annotated[Optional[CredentialsAuthorizeRequest], Field(description="Dati delle credenziali da autorizzare.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CredentialsAuthorizeResponse]:
        """Autorizza credenziali

        Autorizza l'accesso alle credenziali per la firma.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.

        :param credentials_authorize_request: Dati delle credenziali da autorizzare.
        :type credentials_authorize_request: CredentialsAuthorizeRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._credentials_authorize_post_serialize(
            credentials_authorize_request=credentials_authorize_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CredentialsAuthorizeResponse",
            '400': None,
            '403': None,
            '404': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def credentials_authorize_post_without_preload_content(
        self,
        credentials_authorize_request: Annotated[Optional[CredentialsAuthorizeRequest], Field(description="Dati delle credenziali da autorizzare.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Autorizza credenziali

        Autorizza l'accesso alle credenziali per la firma.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.

        :param credentials_authorize_request: Dati delle credenziali da autorizzare.
        :type credentials_authorize_request: CredentialsAuthorizeRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._credentials_authorize_post_serialize(
            credentials_authorize_request=credentials_authorize_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CredentialsAuthorizeResponse",
            '400': None,
            '403': None,
            '404': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _credentials_authorize_post_serialize(
        self,
        credentials_authorize_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if credentials_authorize_request is not None:
            _body_params = credentials_authorize_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/credentials/authorize',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def credentials_info_get(
        self,
        credentials_id: Annotated[str, Field(min_length=9, strict=True, max_length=9, description="Identificativo delle credenziali.")],
        certificates: Annotated[Optional[Any], Field(description="Specifica quali certificati dalla catena devono essere restituiti. - none: nessuno - single: solo il certificato dell'identità finale - chain: l'intera catena dei certificati")] = None,
        cert_info: Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta anche i parametri contenenti informazioni relative al certificato.")] = None,
        auth_info: Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta anche i parametri contenenti informazioni sul meccanismo di autorizzazione supportato dalle credenziali.")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="Lingua prescelta per la risposta, specificata secondo RFC 5646.")] = None,
        client_data: Annotated[Optional[StrictStr], Field(description="Dati arbitrari dell'applicazione di firma.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CredentialsInfoResponse:
        """Informazioni credenziali

        Ottiene le informazioni sull'identità principale ed il certificato (o la catena di certificati) ad esso associata.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.

        :param credentials_id: Identificativo delle credenziali. (required)
        :type credentials_id: str
        :param certificates: Specifica quali certificati dalla catena devono essere restituiti. - none: nessuno - single: solo il certificato dell'identità finale - chain: l'intera catena dei certificati
        :type certificates: CredentialsCertificate
        :param cert_info: Indica se includere nella risposta anche i parametri contenenti informazioni relative al certificato.
        :type cert_info: bool
        :param auth_info: Indica se includere nella risposta anche i parametri contenenti informazioni sul meccanismo di autorizzazione supportato dalle credenziali.
        :type auth_info: bool
        :param lang: Lingua prescelta per la risposta, specificata secondo RFC 5646.
        :type lang: str
        :param client_data: Dati arbitrari dell'applicazione di firma.
        :type client_data: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._credentials_info_get_serialize(
            credentials_id=credentials_id,
            certificates=certificates,
            cert_info=cert_info,
            auth_info=auth_info,
            lang=lang,
            client_data=client_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CredentialsInfoResponse",
            '400': None,
            '403': None,
            '404': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def credentials_info_get_with_http_info(
        self,
        credentials_id: Annotated[str, Field(min_length=9, strict=True, max_length=9, description="Identificativo delle credenziali.")],
        certificates: Annotated[Optional[Any], Field(description="Specifica quali certificati dalla catena devono essere restituiti. - none: nessuno - single: solo il certificato dell'identità finale - chain: l'intera catena dei certificati")] = None,
        cert_info: Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta anche i parametri contenenti informazioni relative al certificato.")] = None,
        auth_info: Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta anche i parametri contenenti informazioni sul meccanismo di autorizzazione supportato dalle credenziali.")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="Lingua prescelta per la risposta, specificata secondo RFC 5646.")] = None,
        client_data: Annotated[Optional[StrictStr], Field(description="Dati arbitrari dell'applicazione di firma.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CredentialsInfoResponse]:
        """Informazioni credenziali

        Ottiene le informazioni sull'identità principale ed il certificato (o la catena di certificati) ad esso associata.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.

        :param credentials_id: Identificativo delle credenziali. (required)
        :type credentials_id: str
        :param certificates: Specifica quali certificati dalla catena devono essere restituiti. - none: nessuno - single: solo il certificato dell'identità finale - chain: l'intera catena dei certificati
        :type certificates: CredentialsCertificate
        :param cert_info: Indica se includere nella risposta anche i parametri contenenti informazioni relative al certificato.
        :type cert_info: bool
        :param auth_info: Indica se includere nella risposta anche i parametri contenenti informazioni sul meccanismo di autorizzazione supportato dalle credenziali.
        :type auth_info: bool
        :param lang: Lingua prescelta per la risposta, specificata secondo RFC 5646.
        :type lang: str
        :param client_data: Dati arbitrari dell'applicazione di firma.
        :type client_data: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._credentials_info_get_serialize(
            credentials_id=credentials_id,
            certificates=certificates,
            cert_info=cert_info,
            auth_info=auth_info,
            lang=lang,
            client_data=client_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CredentialsInfoResponse",
            '400': None,
            '403': None,
            '404': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def credentials_info_get_without_preload_content(
        self,
        credentials_id: Annotated[str, Field(min_length=9, strict=True, max_length=9, description="Identificativo delle credenziali.")],
        certificates: Annotated[Optional[Any], Field(description="Specifica quali certificati dalla catena devono essere restituiti. - none: nessuno - single: solo il certificato dell'identità finale - chain: l'intera catena dei certificati")] = None,
        cert_info: Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta anche i parametri contenenti informazioni relative al certificato.")] = None,
        auth_info: Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta anche i parametri contenenti informazioni sul meccanismo di autorizzazione supportato dalle credenziali.")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="Lingua prescelta per la risposta, specificata secondo RFC 5646.")] = None,
        client_data: Annotated[Optional[StrictStr], Field(description="Dati arbitrari dell'applicazione di firma.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Informazioni credenziali

        Ottiene le informazioni sull'identità principale ed il certificato (o la catena di certificati) ad esso associata.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.

        :param credentials_id: Identificativo delle credenziali. (required)
        :type credentials_id: str
        :param certificates: Specifica quali certificati dalla catena devono essere restituiti. - none: nessuno - single: solo il certificato dell'identità finale - chain: l'intera catena dei certificati
        :type certificates: CredentialsCertificate
        :param cert_info: Indica se includere nella risposta anche i parametri contenenti informazioni relative al certificato.
        :type cert_info: bool
        :param auth_info: Indica se includere nella risposta anche i parametri contenenti informazioni sul meccanismo di autorizzazione supportato dalle credenziali.
        :type auth_info: bool
        :param lang: Lingua prescelta per la risposta, specificata secondo RFC 5646.
        :type lang: str
        :param client_data: Dati arbitrari dell'applicazione di firma.
        :type client_data: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._credentials_info_get_serialize(
            credentials_id=credentials_id,
            certificates=certificates,
            cert_info=cert_info,
            auth_info=auth_info,
            lang=lang,
            client_data=client_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CredentialsInfoResponse",
            '400': None,
            '403': None,
            '404': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _credentials_info_get_serialize(
        self,
        credentials_id,
        certificates,
        cert_info,
        auth_info,
        lang,
        client_data,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if credentials_id is not None:
            
            _query_params.append(('credentials_id', credentials_id))
            
        if certificates is not None:
            
            _query_params.append(('certificates', certificates.value))
            
        if cert_info is not None:
            
            _query_params.append(('cert_info', cert_info))
            
        if auth_info is not None:
            
            _query_params.append(('auth_info', auth_info))
            
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        if client_data is not None:
            
            _query_params.append(('client_data', client_data))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/credentials/info',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def credentials_list_get(
        self,
        identificativo_soggetto: Annotated[StrictStr, Field(description="Codice Fiscale di un Operatore iscritto.")],
        user_name: Annotated[Optional[Annotated[str, Field(strict=True, max_length=256)]], Field(description="Identificativo dell'utente (da SPID, CIE, CNS).")] = None,
        credential_info: Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta anche le informazioni relative alla chiave pubblica del certificato ed il certificato stesso, oppure la catena di certificati associata alle credenziali.")] = None,
        only_valid: Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta solo credenziali utilizzabili per creare una firma valida.")] = None,
        certificates: Annotated[Optional[Any], Field(description="Specifica quali certificati dalla catena devono essere restituiti. - none: nessuno - single: solo il certificato dell'identità finale - chain: l'intera catena dei certificati")] = None,
        cert_info: Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta anche i parametri contenenti informazioni relative al certificato.")] = None,
        auth_info: Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta anche i parametri contenenti informazioni sul meccanismo di autorizzazione supportato dalle credenziali.")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="Lingua prescelta per la risposta, specificata secondo RFC 5646.")] = None,
        client_data: Annotated[Optional[StrictStr], Field(description="Dati arbitrari dell'applicazione di firma.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CredentialsListResponse:
        """Elenco credenziali soggetto

        Ottiene l'elenco delle credenziali associate ad un soggetto.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.

        :param identificativo_soggetto: Codice Fiscale di un Operatore iscritto. (required)
        :type identificativo_soggetto: str
        :param user_name: Identificativo dell'utente (da SPID, CIE, CNS).
        :type user_name: str
        :param credential_info: Indica se includere nella risposta anche le informazioni relative alla chiave pubblica del certificato ed il certificato stesso, oppure la catena di certificati associata alle credenziali.
        :type credential_info: bool
        :param only_valid: Indica se includere nella risposta solo credenziali utilizzabili per creare una firma valida.
        :type only_valid: bool
        :param certificates: Specifica quali certificati dalla catena devono essere restituiti. - none: nessuno - single: solo il certificato dell'identità finale - chain: l'intera catena dei certificati
        :type certificates: CredentialsCertificate
        :param cert_info: Indica se includere nella risposta anche i parametri contenenti informazioni relative al certificato.
        :type cert_info: bool
        :param auth_info: Indica se includere nella risposta anche i parametri contenenti informazioni sul meccanismo di autorizzazione supportato dalle credenziali.
        :type auth_info: bool
        :param lang: Lingua prescelta per la risposta, specificata secondo RFC 5646.
        :type lang: str
        :param client_data: Dati arbitrari dell'applicazione di firma.
        :type client_data: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._credentials_list_get_serialize(
            identificativo_soggetto=identificativo_soggetto,
            user_name=user_name,
            credential_info=credential_info,
            only_valid=only_valid,
            certificates=certificates,
            cert_info=cert_info,
            auth_info=auth_info,
            lang=lang,
            client_data=client_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CredentialsListResponse",
            '400': None,
            '403': None,
            '404': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def credentials_list_get_with_http_info(
        self,
        identificativo_soggetto: Annotated[StrictStr, Field(description="Codice Fiscale di un Operatore iscritto.")],
        user_name: Annotated[Optional[Annotated[str, Field(strict=True, max_length=256)]], Field(description="Identificativo dell'utente (da SPID, CIE, CNS).")] = None,
        credential_info: Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta anche le informazioni relative alla chiave pubblica del certificato ed il certificato stesso, oppure la catena di certificati associata alle credenziali.")] = None,
        only_valid: Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta solo credenziali utilizzabili per creare una firma valida.")] = None,
        certificates: Annotated[Optional[Any], Field(description="Specifica quali certificati dalla catena devono essere restituiti. - none: nessuno - single: solo il certificato dell'identità finale - chain: l'intera catena dei certificati")] = None,
        cert_info: Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta anche i parametri contenenti informazioni relative al certificato.")] = None,
        auth_info: Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta anche i parametri contenenti informazioni sul meccanismo di autorizzazione supportato dalle credenziali.")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="Lingua prescelta per la risposta, specificata secondo RFC 5646.")] = None,
        client_data: Annotated[Optional[StrictStr], Field(description="Dati arbitrari dell'applicazione di firma.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CredentialsListResponse]:
        """Elenco credenziali soggetto

        Ottiene l'elenco delle credenziali associate ad un soggetto.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.

        :param identificativo_soggetto: Codice Fiscale di un Operatore iscritto. (required)
        :type identificativo_soggetto: str
        :param user_name: Identificativo dell'utente (da SPID, CIE, CNS).
        :type user_name: str
        :param credential_info: Indica se includere nella risposta anche le informazioni relative alla chiave pubblica del certificato ed il certificato stesso, oppure la catena di certificati associata alle credenziali.
        :type credential_info: bool
        :param only_valid: Indica se includere nella risposta solo credenziali utilizzabili per creare una firma valida.
        :type only_valid: bool
        :param certificates: Specifica quali certificati dalla catena devono essere restituiti. - none: nessuno - single: solo il certificato dell'identità finale - chain: l'intera catena dei certificati
        :type certificates: CredentialsCertificate
        :param cert_info: Indica se includere nella risposta anche i parametri contenenti informazioni relative al certificato.
        :type cert_info: bool
        :param auth_info: Indica se includere nella risposta anche i parametri contenenti informazioni sul meccanismo di autorizzazione supportato dalle credenziali.
        :type auth_info: bool
        :param lang: Lingua prescelta per la risposta, specificata secondo RFC 5646.
        :type lang: str
        :param client_data: Dati arbitrari dell'applicazione di firma.
        :type client_data: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._credentials_list_get_serialize(
            identificativo_soggetto=identificativo_soggetto,
            user_name=user_name,
            credential_info=credential_info,
            only_valid=only_valid,
            certificates=certificates,
            cert_info=cert_info,
            auth_info=auth_info,
            lang=lang,
            client_data=client_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CredentialsListResponse",
            '400': None,
            '403': None,
            '404': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def credentials_list_get_without_preload_content(
        self,
        identificativo_soggetto: Annotated[StrictStr, Field(description="Codice Fiscale di un Operatore iscritto.")],
        user_name: Annotated[Optional[Annotated[str, Field(strict=True, max_length=256)]], Field(description="Identificativo dell'utente (da SPID, CIE, CNS).")] = None,
        credential_info: Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta anche le informazioni relative alla chiave pubblica del certificato ed il certificato stesso, oppure la catena di certificati associata alle credenziali.")] = None,
        only_valid: Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta solo credenziali utilizzabili per creare una firma valida.")] = None,
        certificates: Annotated[Optional[Any], Field(description="Specifica quali certificati dalla catena devono essere restituiti. - none: nessuno - single: solo il certificato dell'identità finale - chain: l'intera catena dei certificati")] = None,
        cert_info: Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta anche i parametri contenenti informazioni relative al certificato.")] = None,
        auth_info: Annotated[Optional[StrictBool], Field(description="Indica se includere nella risposta anche i parametri contenenti informazioni sul meccanismo di autorizzazione supportato dalle credenziali.")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="Lingua prescelta per la risposta, specificata secondo RFC 5646.")] = None,
        client_data: Annotated[Optional[StrictStr], Field(description="Dati arbitrari dell'applicazione di firma.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Elenco credenziali soggetto

        Ottiene l'elenco delle credenziali associate ad un soggetto.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.

        :param identificativo_soggetto: Codice Fiscale di un Operatore iscritto. (required)
        :type identificativo_soggetto: str
        :param user_name: Identificativo dell'utente (da SPID, CIE, CNS).
        :type user_name: str
        :param credential_info: Indica se includere nella risposta anche le informazioni relative alla chiave pubblica del certificato ed il certificato stesso, oppure la catena di certificati associata alle credenziali.
        :type credential_info: bool
        :param only_valid: Indica se includere nella risposta solo credenziali utilizzabili per creare una firma valida.
        :type only_valid: bool
        :param certificates: Specifica quali certificati dalla catena devono essere restituiti. - none: nessuno - single: solo il certificato dell'identità finale - chain: l'intera catena dei certificati
        :type certificates: CredentialsCertificate
        :param cert_info: Indica se includere nella risposta anche i parametri contenenti informazioni relative al certificato.
        :type cert_info: bool
        :param auth_info: Indica se includere nella risposta anche i parametri contenenti informazioni sul meccanismo di autorizzazione supportato dalle credenziali.
        :type auth_info: bool
        :param lang: Lingua prescelta per la risposta, specificata secondo RFC 5646.
        :type lang: str
        :param client_data: Dati arbitrari dell'applicazione di firma.
        :type client_data: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._credentials_list_get_serialize(
            identificativo_soggetto=identificativo_soggetto,
            user_name=user_name,
            credential_info=credential_info,
            only_valid=only_valid,
            certificates=certificates,
            cert_info=cert_info,
            auth_info=auth_info,
            lang=lang,
            client_data=client_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CredentialsListResponse",
            '400': None,
            '403': None,
            '404': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _credentials_list_get_serialize(
        self,
        identificativo_soggetto,
        user_name,
        credential_info,
        only_valid,
        certificates,
        cert_info,
        auth_info,
        lang,
        client_data,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if identificativo_soggetto is not None:
            
            _query_params.append(('identificativo_soggetto', identificativo_soggetto))
            
        if user_name is not None:
            
            _query_params.append(('user_name', user_name))
            
        if credential_info is not None:
            
            _query_params.append(('credential_info', credential_info))
            
        if only_valid is not None:
            
            _query_params.append(('only_valid', only_valid))
            
        if certificates is not None:
            
            _query_params.append(('certificates', certificates.value))
            
        if cert_info is not None:
            
            _query_params.append(('cert_info', cert_info))
            
        if auth_info is not None:
            
            _query_params.append(('auth_info', auth_info))
            
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        if client_data is not None:
            
            _query_params.append(('client_data', client_data))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/credentials/list',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def credentials_post(
        self,
        create_update_credentials_request: Annotated[Optional[CreateUpdateCredentialsRequest], Field(description="Dati delle credenziali.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateUpdateCredentialsResponse:
        """Crea/aggiorna credenziali

        Crea delle nuove credenziali associate al soggetto e al dispositivo specificati, oppure aggiorna le informazioni associate a credenziali esistenti.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.

        :param create_update_credentials_request: Dati delle credenziali.
        :type create_update_credentials_request: CreateUpdateCredentialsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._credentials_post_serialize(
            create_update_credentials_request=create_update_credentials_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateUpdateCredentialsResponse",
            '400': None,
            '403': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def credentials_post_with_http_info(
        self,
        create_update_credentials_request: Annotated[Optional[CreateUpdateCredentialsRequest], Field(description="Dati delle credenziali.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateUpdateCredentialsResponse]:
        """Crea/aggiorna credenziali

        Crea delle nuove credenziali associate al soggetto e al dispositivo specificati, oppure aggiorna le informazioni associate a credenziali esistenti.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.

        :param create_update_credentials_request: Dati delle credenziali.
        :type create_update_credentials_request: CreateUpdateCredentialsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._credentials_post_serialize(
            create_update_credentials_request=create_update_credentials_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateUpdateCredentialsResponse",
            '400': None,
            '403': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def credentials_post_without_preload_content(
        self,
        create_update_credentials_request: Annotated[Optional[CreateUpdateCredentialsRequest], Field(description="Dati delle credenziali.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Crea/aggiorna credenziali

        Crea delle nuove credenziali associate al soggetto e al dispositivo specificati, oppure aggiorna le informazioni associate a credenziali esistenti.  Per ulteriori informazioni consultare la documentazione del CSC (Cloud Signature Consortium) al link: https://cloudsignatureconsortium.org/download-api-specifications/.

        :param create_update_credentials_request: Dati delle credenziali.
        :type create_update_credentials_request: CreateUpdateCredentialsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._credentials_post_serialize(
            create_update_credentials_request=create_update_credentials_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateUpdateCredentialsResponse",
            '400': None,
            '403': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _credentials_post_serialize(
        self,
        create_update_credentials_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_update_credentials_request is not None:
            _body_params = create_update_credentials_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/credentials',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def info_get(
        self,
        lang: Annotated[Optional[StrictStr], Field(description="Lingua prescelta per la risposta, specificata secondo RFC 5646.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> InfoData:
        """Info servizio

        Restituisce informazioni sul servizio e l'elenco dei metodi API implementati.

        :param lang: Lingua prescelta per la risposta, specificata secondo RFC 5646.
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._info_get_serialize(
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InfoData",
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def info_get_with_http_info(
        self,
        lang: Annotated[Optional[StrictStr], Field(description="Lingua prescelta per la risposta, specificata secondo RFC 5646.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[InfoData]:
        """Info servizio

        Restituisce informazioni sul servizio e l'elenco dei metodi API implementati.

        :param lang: Lingua prescelta per la risposta, specificata secondo RFC 5646.
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._info_get_serialize(
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InfoData",
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def info_get_without_preload_content(
        self,
        lang: Annotated[Optional[StrictStr], Field(description="Lingua prescelta per la risposta, specificata secondo RFC 5646.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Info servizio

        Restituisce informazioni sul servizio e l'elenco dei metodi API implementati.

        :param lang: Lingua prescelta per la risposta, specificata secondo RFC 5646.
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._info_get_serialize(
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InfoData",
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _info_get_serialize(
        self,
        lang,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/info',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def signatures_sign_hash_post(
        self,
        signature_request: Optional[SignatureRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SignatureResponse:
        """Firma hash

        Calcola la firma di uno o più hash specificati.

        :param signature_request: 
        :type signature_request: SignatureRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._signatures_sign_hash_post_serialize(
            signature_request=signature_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SignatureResponse",
            '400': None,
            '403': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def signatures_sign_hash_post_with_http_info(
        self,
        signature_request: Optional[SignatureRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SignatureResponse]:
        """Firma hash

        Calcola la firma di uno o più hash specificati.

        :param signature_request: 
        :type signature_request: SignatureRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._signatures_sign_hash_post_serialize(
            signature_request=signature_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SignatureResponse",
            '400': None,
            '403': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def signatures_sign_hash_post_without_preload_content(
        self,
        signature_request: Optional[SignatureRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Firma hash

        Calcola la firma di uno o più hash specificati.

        :param signature_request: 
        :type signature_request: SignatureRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._signatures_sign_hash_post_serialize(
            signature_request=signature_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SignatureResponse",
            '400': None,
            '403': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _signatures_sign_hash_post_serialize(
        self,
        signature_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if signature_request is not None:
            _body_params = signature_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/signatures/sign-hash',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def signatures_sign_hash_post_0(
        self,
        signature_request: Optional[SignatureRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SignatureResponse:
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /signatures/sign-hash - Firma hash

        Calcola la firma di uno o più hash specificati.

        :param signature_request: 
        :type signature_request: SignatureRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("POST /signatures/signHash is deprecated.", DeprecationWarning)

        _param = self._signatures_sign_hash_post_0_serialize(
            signature_request=signature_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SignatureResponse",
            '400': None,
            '403': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def signatures_sign_hash_post_0_with_http_info(
        self,
        signature_request: Optional[SignatureRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SignatureResponse]:
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /signatures/sign-hash - Firma hash

        Calcola la firma di uno o più hash specificati.

        :param signature_request: 
        :type signature_request: SignatureRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("POST /signatures/signHash is deprecated.", DeprecationWarning)

        _param = self._signatures_sign_hash_post_0_serialize(
            signature_request=signature_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SignatureResponse",
            '400': None,
            '403': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def signatures_sign_hash_post_0_without_preload_content(
        self,
        signature_request: Optional[SignatureRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /signatures/sign-hash - Firma hash

        Calcola la firma di uno o più hash specificati.

        :param signature_request: 
        :type signature_request: SignatureRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("POST /signatures/signHash is deprecated.", DeprecationWarning)

        _param = self._signatures_sign_hash_post_0_serialize(
            signature_request=signature_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SignatureResponse",
            '400': None,
            '403': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _signatures_sign_hash_post_0_serialize(
        self,
        signature_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if signature_request is not None:
            _body_params = signature_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/signatures/signHash',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


