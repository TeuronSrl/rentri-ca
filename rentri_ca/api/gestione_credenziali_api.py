# coding: utf-8

"""
    ca-rentri

    Servizio RENTRI CA

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr, constr

from typing import Optional

from rentri_ca.models.boarding_access_response import BoardingAccessResponse
from rentri_ca.models.change_pin_request import ChangePinRequest
from rentri_ca.models.credentials_model import CredentialsModel
from rentri_ca.models.credentials_status_response import CredentialsStatusResponse
from rentri_ca.models.reset_pin_request import ResetPinRequest

from rentri_ca.api_client import ApiClient
from rentri_ca.api_response import ApiResponse
from rentri_ca.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class GestioneCredenzialiApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def credentials_boarding_qrcode_token_get(self, qrcode_token : Annotated[StrictStr, Field(..., description="Token letto dal QR Code di boarding.")], pin : Annotated[constr(strict=True, max_length=6, min_length=6), Field(..., description="PIN di boarding.")], **kwargs) -> BoardingAccessResponse:  # noqa: E501
        """Informazioni boarding  # noqa: E501

        Verifica se il codice di boarding specificato è attivo e restituisce le informazioni necessarie al dispositivo per creare delle nuove credenziali.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_boarding_qrcode_token_get(qrcode_token, pin, async_req=True)
        >>> result = thread.get()

        :param qrcode_token: Token letto dal QR Code di boarding. (required)
        :type qrcode_token: str
        :param pin: PIN di boarding. (required)
        :type pin: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BoardingAccessResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the credentials_boarding_qrcode_token_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.credentials_boarding_qrcode_token_get_with_http_info(qrcode_token, pin, **kwargs)  # noqa: E501

    @validate_arguments
    def credentials_boarding_qrcode_token_get_with_http_info(self, qrcode_token : Annotated[StrictStr, Field(..., description="Token letto dal QR Code di boarding.")], pin : Annotated[constr(strict=True, max_length=6, min_length=6), Field(..., description="PIN di boarding.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Informazioni boarding  # noqa: E501

        Verifica se il codice di boarding specificato è attivo e restituisce le informazioni necessarie al dispositivo per creare delle nuove credenziali.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_boarding_qrcode_token_get_with_http_info(qrcode_token, pin, async_req=True)
        >>> result = thread.get()

        :param qrcode_token: Token letto dal QR Code di boarding. (required)
        :type qrcode_token: str
        :param pin: PIN di boarding. (required)
        :type pin: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BoardingAccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'qrcode_token',
            'pin'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method credentials_boarding_qrcode_token_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['qrcode_token'] is not None:
            _path_params['qrcode_token'] = _params['qrcode_token']


        # process the query parameters
        _query_params = []
        if _params.get('pin') is not None:  # noqa: E501
            _query_params.append(('pin', _params['pin']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "BoardingAccessResponse",
            '403': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/credentials/boarding/{qrcode_token}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def credentials_credentials_id_change_pin_put(self, credentials_id : Annotated[constr(strict=True, max_length=9, min_length=9), Field(..., description="Identificativo delle credenziali")], change_pin_request : Annotated[Optional[ChangePinRequest], Field(description="Dati delle credenziali e nuovo PIN.")] = None, **kwargs) -> None:  # noqa: E501
        """Cambio PIN  # noqa: E501

        Imposta un nuovo PIN operativo per le credenziali specificate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_credentials_id_change_pin_put(credentials_id, change_pin_request, async_req=True)
        >>> result = thread.get()

        :param credentials_id: Identificativo delle credenziali (required)
        :type credentials_id: str
        :param change_pin_request: Dati delle credenziali e nuovo PIN.
        :type change_pin_request: ChangePinRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the credentials_credentials_id_change_pin_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.credentials_credentials_id_change_pin_put_with_http_info(credentials_id, change_pin_request, **kwargs)  # noqa: E501

    @validate_arguments
    def credentials_credentials_id_change_pin_put_with_http_info(self, credentials_id : Annotated[constr(strict=True, max_length=9, min_length=9), Field(..., description="Identificativo delle credenziali")], change_pin_request : Annotated[Optional[ChangePinRequest], Field(description="Dati delle credenziali e nuovo PIN.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Cambio PIN  # noqa: E501

        Imposta un nuovo PIN operativo per le credenziali specificate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_credentials_id_change_pin_put_with_http_info(credentials_id, change_pin_request, async_req=True)
        >>> result = thread.get()

        :param credentials_id: Identificativo delle credenziali (required)
        :type credentials_id: str
        :param change_pin_request: Dati delle credenziali e nuovo PIN.
        :type change_pin_request: ChangePinRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'credentials_id',
            'change_pin_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method credentials_credentials_id_change_pin_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['credentials_id'] is not None:
            _path_params['credentials_id'] = _params['credentials_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['change_pin_request'] is not None:
            _body_params = _params['change_pin_request']

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/credentials/{credentials_id}/change-pin', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def credentials_credentials_id_delete(self, credentials_id : Annotated[constr(strict=True, max_length=9, min_length=9), Field(..., description="Identificativo delle credenziali da eliminare.")], **kwargs) -> None:  # noqa: E501
        """Elimina credenziali  # noqa: E501

        Elimina le credenziali indicate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_credentials_id_delete(credentials_id, async_req=True)
        >>> result = thread.get()

        :param credentials_id: Identificativo delle credenziali da eliminare. (required)
        :type credentials_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the credentials_credentials_id_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.credentials_credentials_id_delete_with_http_info(credentials_id, **kwargs)  # noqa: E501

    @validate_arguments
    def credentials_credentials_id_delete_with_http_info(self, credentials_id : Annotated[constr(strict=True, max_length=9, min_length=9), Field(..., description="Identificativo delle credenziali da eliminare.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Elimina credenziali  # noqa: E501

        Elimina le credenziali indicate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_credentials_id_delete_with_http_info(credentials_id, async_req=True)
        >>> result = thread.get()

        :param credentials_id: Identificativo delle credenziali da eliminare. (required)
        :type credentials_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'credentials_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method credentials_credentials_id_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['credentials_id'] is not None:
            _path_params['credentials_id'] = _params['credentials_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/credentials/{credentials_id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def credentials_credentials_id_get(self, credentials_id : Annotated[StrictStr, Field(..., description="Identificativo delle credenziali.")], **kwargs) -> CredentialsModel:  # noqa: E501
        """Dettaglio credenziali  # noqa: E501

        Ottiene le informazioni di dettaglio delle credenziali specificate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_credentials_id_get(credentials_id, async_req=True)
        >>> result = thread.get()

        :param credentials_id: Identificativo delle credenziali. (required)
        :type credentials_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CredentialsModel
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the credentials_credentials_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.credentials_credentials_id_get_with_http_info(credentials_id, **kwargs)  # noqa: E501

    @validate_arguments
    def credentials_credentials_id_get_with_http_info(self, credentials_id : Annotated[StrictStr, Field(..., description="Identificativo delle credenziali.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Dettaglio credenziali  # noqa: E501

        Ottiene le informazioni di dettaglio delle credenziali specificate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_credentials_id_get_with_http_info(credentials_id, async_req=True)
        >>> result = thread.get()

        :param credentials_id: Identificativo delle credenziali. (required)
        :type credentials_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CredentialsModel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'credentials_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method credentials_credentials_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['credentials_id'] is not None:
            _path_params['credentials_id'] = _params['credentials_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "CredentialsModel",
            '403': None,
            '404': None,
            '429': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/credentials/{credentials_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def credentials_credentials_id_reset_pin_put(self, credentials_id : Annotated[constr(strict=True, max_length=9, min_length=9), Field(..., description="Identificativo delle credenziali")], reset_pin_request : Annotated[Optional[ResetPinRequest], Field(description="Dati delle credenziali e nuovo PIN.")] = None, **kwargs) -> None:  # noqa: E501
        """Reset PIN  # noqa: E501

        Completa la procedura di reset del PIN operativo avviata tramite la dashboard di gestione dei dispositivi, impostando un nuovo PIN per le credenziali specificate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_credentials_id_reset_pin_put(credentials_id, reset_pin_request, async_req=True)
        >>> result = thread.get()

        :param credentials_id: Identificativo delle credenziali (required)
        :type credentials_id: str
        :param reset_pin_request: Dati delle credenziali e nuovo PIN.
        :type reset_pin_request: ResetPinRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the credentials_credentials_id_reset_pin_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.credentials_credentials_id_reset_pin_put_with_http_info(credentials_id, reset_pin_request, **kwargs)  # noqa: E501

    @validate_arguments
    def credentials_credentials_id_reset_pin_put_with_http_info(self, credentials_id : Annotated[constr(strict=True, max_length=9, min_length=9), Field(..., description="Identificativo delle credenziali")], reset_pin_request : Annotated[Optional[ResetPinRequest], Field(description="Dati delle credenziali e nuovo PIN.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Reset PIN  # noqa: E501

        Completa la procedura di reset del PIN operativo avviata tramite la dashboard di gestione dei dispositivi, impostando un nuovo PIN per le credenziali specificate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_credentials_id_reset_pin_put_with_http_info(credentials_id, reset_pin_request, async_req=True)
        >>> result = thread.get()

        :param credentials_id: Identificativo delle credenziali (required)
        :type credentials_id: str
        :param reset_pin_request: Dati delle credenziali e nuovo PIN.
        :type reset_pin_request: ResetPinRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'credentials_id',
            'reset_pin_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method credentials_credentials_id_reset_pin_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['credentials_id'] is not None:
            _path_params['credentials_id'] = _params['credentials_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['reset_pin_request'] is not None:
            _body_params = _params['reset_pin_request']

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/credentials/{credentials_id}/reset-pin', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def credentials_credentials_id_rimuovi_associazione_delete(self, credentials_id : Annotated[constr(strict=True, max_length=9, min_length=9), Field(..., description="Identificativo delle credenziali.")], num_iscr_sito : Annotated[constr(strict=True, max_length=22, min_length=22), Field(..., description="Identificativo dell'unità locale da rimuovere.")], **kwargs) -> None:  # noqa: E501
        """Rimuovi associazione credenziali  # noqa: E501

        Rimuove l'associazione delle credenziali con l'operatore o con l'unità locale specificata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_credentials_id_rimuovi_associazione_delete(credentials_id, num_iscr_sito, async_req=True)
        >>> result = thread.get()

        :param credentials_id: Identificativo delle credenziali. (required)
        :type credentials_id: str
        :param num_iscr_sito: Identificativo dell'unità locale da rimuovere. (required)
        :type num_iscr_sito: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the credentials_credentials_id_rimuovi_associazione_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.credentials_credentials_id_rimuovi_associazione_delete_with_http_info(credentials_id, num_iscr_sito, **kwargs)  # noqa: E501

    @validate_arguments
    def credentials_credentials_id_rimuovi_associazione_delete_with_http_info(self, credentials_id : Annotated[constr(strict=True, max_length=9, min_length=9), Field(..., description="Identificativo delle credenziali.")], num_iscr_sito : Annotated[constr(strict=True, max_length=22, min_length=22), Field(..., description="Identificativo dell'unità locale da rimuovere.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Rimuovi associazione credenziali  # noqa: E501

        Rimuove l'associazione delle credenziali con l'operatore o con l'unità locale specificata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_credentials_id_rimuovi_associazione_delete_with_http_info(credentials_id, num_iscr_sito, async_req=True)
        >>> result = thread.get()

        :param credentials_id: Identificativo delle credenziali. (required)
        :type credentials_id: str
        :param num_iscr_sito: Identificativo dell'unità locale da rimuovere. (required)
        :type num_iscr_sito: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'credentials_id',
            'num_iscr_sito'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method credentials_credentials_id_rimuovi_associazione_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['credentials_id'] is not None:
            _path_params['credentials_id'] = _params['credentials_id']


        # process the query parameters
        _query_params = []
        if _params.get('num_iscr_sito') is not None:  # noqa: E501
            _query_params.append(('num_iscr_sito', _params['num_iscr_sito']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/credentials/{credentials_id}/rimuovi-associazione', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def credentials_credentials_id_status_get(self, credentials_id : Annotated[StrictStr, Field(..., description="Identificativo delle credenziali.")], **kwargs) -> CredentialsStatusResponse:  # noqa: E501
        """Stato credenziali  # noqa: E501

        Ottiene le informazioni sullo stato delle credenziali.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_credentials_id_status_get(credentials_id, async_req=True)
        >>> result = thread.get()

        :param credentials_id: Identificativo delle credenziali. (required)
        :type credentials_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CredentialsStatusResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the credentials_credentials_id_status_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.credentials_credentials_id_status_get_with_http_info(credentials_id, **kwargs)  # noqa: E501

    @validate_arguments
    def credentials_credentials_id_status_get_with_http_info(self, credentials_id : Annotated[StrictStr, Field(..., description="Identificativo delle credenziali.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Stato credenziali  # noqa: E501

        Ottiene le informazioni sullo stato delle credenziali.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credentials_credentials_id_status_get_with_http_info(credentials_id, async_req=True)
        >>> result = thread.get()

        :param credentials_id: Identificativo delle credenziali. (required)
        :type credentials_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CredentialsStatusResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'credentials_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method credentials_credentials_id_status_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['credentials_id'] is not None:
            _path_params['credentials_id'] = _params['credentials_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "CredentialsStatusResponse",
            '403': None,
            '404': None,
            '429': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/credentials/{credentials_id}/status', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
