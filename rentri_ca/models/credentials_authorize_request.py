# coding: utf-8

"""
    ca-rentri

    Servizio RENTRI CA

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, constr, validator
from rentri_ca.models.auth_object_data import AuthObjectData

class CredentialsAuthorizeRequest(BaseModel):
    """
    CredentialsAuthorizeRequest
    """
    credentials_id: constr(strict=True, max_length=9, min_length=9) = Field(default=..., description="Identificativo delle credenziali.")
    num_signatures: StrictInt = Field(...)
    hashes: conlist(StrictStr, max_items=1, min_items=1) = Field(default=..., description="Elenco dei codici hash da firmare in formato base 64. Attualmente Ã¨ consentito l'invio di un solo codice hash.")
    hash_algo: constr(strict=True, min_length=1) = Field(default=..., description="OID dell'algoritmo utilizzato per calcolare l'hash fisso a 2.16.840.1.101.3.4.2.1 (SHA256)")
    description: Optional[StrictStr] = Field(default=None, description="Descrizione della transazione di autenticazione.")
    auth_data: conlist(AuthObjectData, max_items=1, min_items=1) = Field(default=..., description="Informazioni sui metodi di autenticazione disponibili.")
    client_data: Optional[StrictStr] = Field(default=None, description="Dati arbitrari dell'applicazione di firma.")
    __properties = ["credentials_id", "num_signatures", "hashes", "hash_algo", "description", "auth_data", "client_data"]

    @validator('hash_algo')
    def hash_algo_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^2\.16\.840\.1\.101\.3\.4\.2\.1$", value):
            raise ValueError(r"must validate the regular expression /^2\.16\.840\.1\.101\.3\.4\.2\.1$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CredentialsAuthorizeRequest:
        """Create an instance of CredentialsAuthorizeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in auth_data (list)
        _items = []
        if self.auth_data:
            for _item in self.auth_data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['auth_data'] = _items
        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if client_data (nullable) is None
        # and __fields_set__ contains the field
        if self.client_data is None and "client_data" in self.__fields_set__:
            _dict['client_data'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CredentialsAuthorizeRequest:
        """Create an instance of CredentialsAuthorizeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CredentialsAuthorizeRequest.parse_obj(obj)

        _obj = CredentialsAuthorizeRequest.parse_obj({
            "credentials_id": obj.get("credentials_id"),
            "num_signatures": obj.get("num_signatures"),
            "hashes": obj.get("hashes"),
            "hash_algo": obj.get("hash_algo"),
            "description": obj.get("description"),
            "auth_data": [AuthObjectData.from_dict(_item) for _item in obj.get("auth_data")] if obj.get("auth_data") is not None else None,
            "client_data": obj.get("client_data")
        })
        return _obj


