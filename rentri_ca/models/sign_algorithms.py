# coding: utf-8

"""
    ca-rentri

    Servizio RENTRI CA

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class SignAlgorithms(BaseModel):
    """
    SignAlgorithms
    """
    algos: Optional[conlist(StrictStr)] = Field(default=None, description="Elenco degli algoritmi di firma supportati dal servizio.")
    algo_params: Optional[conlist(StrictStr)] = Field(default=None, description="Elenco degli eventuali parametri di firma.")
    __properties = ["algos", "algo_params"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SignAlgorithms:
        """Create an instance of SignAlgorithms from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if algos (nullable) is None
        # and __fields_set__ contains the field
        if self.algos is None and "algos" in self.__fields_set__:
            _dict['algos'] = None

        # set to None if algo_params (nullable) is None
        # and __fields_set__ contains the field
        if self.algo_params is None and "algo_params" in self.__fields_set__:
            _dict['algo_params'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SignAlgorithms:
        """Create an instance of SignAlgorithms from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SignAlgorithms.parse_obj(obj)

        _obj = SignAlgorithms.parse_obj({
            "algos": obj.get("algos"),
            "algo_params": obj.get("algo_params")
        })
        return _obj


