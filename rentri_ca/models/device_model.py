# coding: utf-8

"""
    ca-rentri

    Servizio RENTRI CA

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from rentri_ca.models.device_type import DeviceType
from rentri_ca.models.stato import Stato
from typing import Optional, Set
from typing_extensions import Self

class DeviceModel(BaseModel):
    """
    Dati di base del dispositivo e informazioni sulla registrazione al servizio di smistamento delle notifiche RENTRI.
    """ # noqa: E501
    identifier: Optional[StrictStr] = Field(default=None, description="Identificativo del dispositivo.")
    name: Optional[StrictStr] = Field(default=None, description="Nome.")
    model: Optional[StrictStr] = Field(default=None, description="Modello.")
    manufacturer: Optional[StrictStr] = Field(default=None, description="Produttore.")
    os_version: Optional[StrictStr] = Field(default=None, description="Versione del Sistema Operativo.")
    form_factor: Optional[StrictStr] = Field(default=None, description="Formato.")
    type: Optional[DeviceType] = Field(default=None, description="Tipo di dispositivo (fisico, virtuale).<p>Valori ammessi:<ul style=\"margin:0\"><li><i>Physical</i> - Dispositivo fisico</li><li><i>Virtual</i> - Dispositivo virtuale</li></ul></p>")
    platform: Optional[StrictStr] = Field(default=None, description="Piattaforma o Sistema Operativo (Android, iOS, Windows).")
    data_registrazione: Optional[datetime] = Field(default=None, description="Data di registrazione (formato ISO 8601 UTC).")
    is_banned: Optional[StrictBool] = Field(default=None, description="Indica se il dispositivo è stato bloccato.")
    stato: Optional[Stato] = Field(default=None, description="Stato.")
    app_name: Optional[StrictStr] = Field(default=None, description="Nome dell'app installata.")
    app_package_name: Optional[StrictStr] = Field(default=None, description="Nome del package dell'app installata.")
    app_version: Optional[StrictStr] = Field(default=None, description="Versione dell'app installata.")
    app_build: Optional[StrictStr] = Field(default=None, description="Numero di build dell'app installata.")
    notification_callback_uri: Optional[StrictStr] = Field(default=None, description="URI di callback alla quale verranno inviati in POST i dati delle notifiche RENTRI.")
    notification_callback_parameters: Optional[Dict[str, StrictStr]] = Field(default=None, description="Dizionario di parametri custom che verranno inviati, tra i dati delle notifiche, all'URI di callback.")
    siti: Optional[List[StrictStr]] = Field(default=None, description="Elenco delle unità locali abbinate.")
    __properties: ClassVar[List[str]] = ["identifier", "name", "model", "manufacturer", "os_version", "form_factor", "type", "platform", "data_registrazione", "is_banned", "stato", "app_name", "app_package_name", "app_version", "app_build", "notification_callback_uri", "notification_callback_parameters", "siti"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if identifier (nullable) is None
        # and model_fields_set contains the field
        if self.identifier is None and "identifier" in self.model_fields_set:
            _dict['identifier'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if model (nullable) is None
        # and model_fields_set contains the field
        if self.model is None and "model" in self.model_fields_set:
            _dict['model'] = None

        # set to None if manufacturer (nullable) is None
        # and model_fields_set contains the field
        if self.manufacturer is None and "manufacturer" in self.model_fields_set:
            _dict['manufacturer'] = None

        # set to None if os_version (nullable) is None
        # and model_fields_set contains the field
        if self.os_version is None and "os_version" in self.model_fields_set:
            _dict['os_version'] = None

        # set to None if form_factor (nullable) is None
        # and model_fields_set contains the field
        if self.form_factor is None and "form_factor" in self.model_fields_set:
            _dict['form_factor'] = None

        # set to None if platform (nullable) is None
        # and model_fields_set contains the field
        if self.platform is None and "platform" in self.model_fields_set:
            _dict['platform'] = None

        # set to None if app_name (nullable) is None
        # and model_fields_set contains the field
        if self.app_name is None and "app_name" in self.model_fields_set:
            _dict['app_name'] = None

        # set to None if app_package_name (nullable) is None
        # and model_fields_set contains the field
        if self.app_package_name is None and "app_package_name" in self.model_fields_set:
            _dict['app_package_name'] = None

        # set to None if app_version (nullable) is None
        # and model_fields_set contains the field
        if self.app_version is None and "app_version" in self.model_fields_set:
            _dict['app_version'] = None

        # set to None if app_build (nullable) is None
        # and model_fields_set contains the field
        if self.app_build is None and "app_build" in self.model_fields_set:
            _dict['app_build'] = None

        # set to None if notification_callback_uri (nullable) is None
        # and model_fields_set contains the field
        if self.notification_callback_uri is None and "notification_callback_uri" in self.model_fields_set:
            _dict['notification_callback_uri'] = None

        # set to None if notification_callback_parameters (nullable) is None
        # and model_fields_set contains the field
        if self.notification_callback_parameters is None and "notification_callback_parameters" in self.model_fields_set:
            _dict['notification_callback_parameters'] = None

        # set to None if siti (nullable) is None
        # and model_fields_set contains the field
        if self.siti is None and "siti" in self.model_fields_set:
            _dict['siti'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "identifier": obj.get("identifier"),
            "name": obj.get("name"),
            "model": obj.get("model"),
            "manufacturer": obj.get("manufacturer"),
            "os_version": obj.get("os_version"),
            "form_factor": obj.get("form_factor"),
            "type": obj.get("type"),
            "platform": obj.get("platform"),
            "data_registrazione": obj.get("data_registrazione"),
            "is_banned": obj.get("is_banned"),
            "stato": obj.get("stato"),
            "app_name": obj.get("app_name"),
            "app_package_name": obj.get("app_package_name"),
            "app_version": obj.get("app_version"),
            "app_build": obj.get("app_build"),
            "notification_callback_uri": obj.get("notification_callback_uri"),
            "notification_callback_parameters": obj.get("notification_callback_parameters"),
            "siti": obj.get("siti")
        })
        return _obj


