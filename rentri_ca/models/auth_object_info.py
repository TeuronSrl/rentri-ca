# coding: utf-8

"""
    ca-rentri

    Servizio RENTRI CA

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr

class AuthObjectInfo(BaseModel):
    """
    AuthObjectInfo
    """
    type: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    format: Optional[StrictStr] = None
    generator: Optional[StrictStr] = None
    label: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    __properties = ["type", "id", "format", "generator", "label", "description"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AuthObjectInfo:
        """Create an instance of AuthObjectInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if type (nullable) is None
        # and __fields_set__ contains the field
        if self.type is None and "type" in self.__fields_set__:
            _dict['type'] = None

        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if format (nullable) is None
        # and __fields_set__ contains the field
        if self.format is None and "format" in self.__fields_set__:
            _dict['format'] = None

        # set to None if generator (nullable) is None
        # and __fields_set__ contains the field
        if self.generator is None and "generator" in self.__fields_set__:
            _dict['generator'] = None

        # set to None if label (nullable) is None
        # and __fields_set__ contains the field
        if self.label is None and "label" in self.__fields_set__:
            _dict['label'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AuthObjectInfo:
        """Create an instance of AuthObjectInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AuthObjectInfo.parse_obj(obj)

        _obj = AuthObjectInfo.parse_obj({
            "type": obj.get("type"),
            "id": obj.get("id"),
            "format": obj.get("format"),
            "generator": obj.get("generator"),
            "label": obj.get("label"),
            "description": obj.get("description")
        })
        return _obj


