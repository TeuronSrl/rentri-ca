# coding: utf-8

"""
    ca-rentri

    Servizio RENTRI CA

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from rentri_ca.models.cert_status import CertStatus

class CertData(BaseModel):
    """
    CertData
    """
    status: Optional[CertStatus] = Field(default=None, description="Stato del certificato.<p>Valori ammessi:<ul style=\"margin:0\"><li><i>Valid</i> - Valido.</li><li><i>Expired</i> - Scaduto.</li><li><i>Revoked</i> - Revocato.</li><li><i>Suspended</i> - Sospeso.</li></ul></p>")
    certificates: Optional[conlist(StrictStr)] = Field(default=None, description="Codifica base 64 dei certificati X.509. Se il parametro certificates è \"chain\", è presente l'intera catena di certificati con il certificato dell'ente finale nella prima posizione dell'elenco. Se il parametro certificates è “single”, è presente solo il certificato dell'entità finale. Se il parametro certificates è \"none\", non è presente alcun certificato.")
    issuer_dn: Optional[StrictStr] = Field(default=..., description="Emittente del certificato.")
    serial_number: Optional[StrictStr] = Field(default=..., description="Serial number del certificato.")
    subject_dn: Optional[StrictStr] = Field(default=..., description="Soggetto del certificato.")
    valid_from: datetime = Field(default=..., description="Data di inizio validità del certificato (formato ISO 8601 UTC).")
    valid_to: datetime = Field(default=..., description="Data di fine validità del certificato (formato ISO 8601 UTC).")
    __properties = ["status", "certificates", "issuer_dn", "serial_number", "subject_dn", "valid_from", "valid_to"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CertData:
        """Create an instance of CertData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if certificates (nullable) is None
        # and __fields_set__ contains the field
        if self.certificates is None and "certificates" in self.__fields_set__:
            _dict['certificates'] = None

        # set to None if issuer_dn (nullable) is None
        # and __fields_set__ contains the field
        if self.issuer_dn is None and "issuer_dn" in self.__fields_set__:
            _dict['issuer_dn'] = None

        # set to None if serial_number (nullable) is None
        # and __fields_set__ contains the field
        if self.serial_number is None and "serial_number" in self.__fields_set__:
            _dict['serial_number'] = None

        # set to None if subject_dn (nullable) is None
        # and __fields_set__ contains the field
        if self.subject_dn is None and "subject_dn" in self.__fields_set__:
            _dict['subject_dn'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CertData:
        """Create an instance of CertData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CertData.parse_obj(obj)

        _obj = CertData.parse_obj({
            "status": obj.get("status"),
            "certificates": obj.get("certificates"),
            "issuer_dn": obj.get("issuer_dn"),
            "serial_number": obj.get("serial_number"),
            "subject_dn": obj.get("subject_dn"),
            "valid_from": obj.get("valid_from"),
            "valid_to": obj.get("valid_to")
        })
        return _obj


