# coding: utf-8

"""
    ca-rentri

    Servizio RENTRI CA

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from rentri_ca.models.key_status import KeyStatus

class KeyData(BaseModel):
    """
    KeyData
    """
    status: Optional[KeyStatus] = Field(default=None, description="Stato della chiave di firma.<p>Valori ammessi:<ul style=\"margin:0\"><li><i>Enabled</i> - Chiave abilitata ed utilizzabile per la firma.</li><li><i>Disabled</i> - Chiave disabilitata e non utilizzabile per la firma.</li></ul></p>")
    algo: Optional[conlist(StrictStr)] = Field(default=None, description="Elenco degli OID degli algoritmi chiave supportati.")
    len: Optional[StrictInt] = Field(default=None, description="Lunghezza della chiave crittografica in bit.")
    curve: Optional[StrictStr] = Field(default=None, description="OID della curva ECDSA.")
    __properties = ["status", "algo", "len", "curve"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> KeyData:
        """Create an instance of KeyData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if algo (nullable) is None
        # and __fields_set__ contains the field
        if self.algo is None and "algo" in self.__fields_set__:
            _dict['algo'] = None

        # set to None if len (nullable) is None
        # and __fields_set__ contains the field
        if self.len is None and "len" in self.__fields_set__:
            _dict['len'] = None

        # set to None if curve (nullable) is None
        # and __fields_set__ contains the field
        if self.curve is None and "curve" in self.__fields_set__:
            _dict['curve'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> KeyData:
        """Create an instance of KeyData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return KeyData.parse_obj(obj)

        _obj = KeyData.parse_obj({
            "status": obj.get("status"),
            "algo": obj.get("algo"),
            "len": obj.get("len"),
            "curve": obj.get("curve")
        })
        return _obj


