# coding: utf-8

"""
    ca-rentri

    Servizio RENTRI CA

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from rentri_ca.models.app_info import AppInfo
from rentri_ca.models.device_info import DeviceInfo
from typing import Optional, Set
from typing_extensions import Self

class CreateUpdateCredentialsRequest(BaseModel):
    """
    CreateUpdateCredentialsRequest
    """ # noqa: E501
    identificativo_soggetto: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Codice Fiscale di un Operatore iscritto.")
    num_iscr_sito: Optional[Annotated[str, Field(min_length=22, strict=True, max_length=22)]] = Field(default=None, description="Numero iscrizione unitÃ  locale")
    identificativo: Annotated[str, Field(min_length=1, strict=True, max_length=100)] = Field(description="Identificativo del soggetto associato alle credenziali.")
    identificativo_altro: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Identificativo alternativo del soggetto associato alle credenziali.")
    user_name: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="Identificativo dell'utente (da SPID, CIE, CNS).")
    device_info: DeviceInfo = Field(description="Informazioni sul dispositivo.")
    app_info: AppInfo = Field(description="Informazioni sulla App.")
    __properties: ClassVar[List[str]] = ["identificativo_soggetto", "num_iscr_sito", "identificativo", "identificativo_altro", "user_name", "device_info", "app_info"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateUpdateCredentialsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of device_info
        if self.device_info:
            _dict['device_info'] = self.device_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_info
        if self.app_info:
            _dict['app_info'] = self.app_info.to_dict()
        # set to None if num_iscr_sito (nullable) is None
        # and model_fields_set contains the field
        if self.num_iscr_sito is None and "num_iscr_sito" in self.model_fields_set:
            _dict['num_iscr_sito'] = None

        # set to None if identificativo_altro (nullable) is None
        # and model_fields_set contains the field
        if self.identificativo_altro is None and "identificativo_altro" in self.model_fields_set:
            _dict['identificativo_altro'] = None

        # set to None if user_name (nullable) is None
        # and model_fields_set contains the field
        if self.user_name is None and "user_name" in self.model_fields_set:
            _dict['user_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateUpdateCredentialsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "identificativo_soggetto": obj.get("identificativo_soggetto"),
            "num_iscr_sito": obj.get("num_iscr_sito"),
            "identificativo": obj.get("identificativo"),
            "identificativo_altro": obj.get("identificativo_altro"),
            "user_name": obj.get("user_name"),
            "device_info": DeviceInfo.from_dict(obj["device_info"]) if obj.get("device_info") is not None else None,
            "app_info": AppInfo.from_dict(obj["app_info"]) if obj.get("app_info") is not None else None
        })
        return _obj


