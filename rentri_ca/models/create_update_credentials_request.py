# coding: utf-8

"""
    ca-rentri

    Servizio RENTRI CA

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, constr
from rentri_ca.models.app_info import AppInfo
from rentri_ca.models.device_info import DeviceInfo

class CreateUpdateCredentialsRequest(BaseModel):
    """
    CreateUpdateCredentialsRequest
    """
    identificativo_soggetto: constr(strict=True, min_length=1) = Field(default=..., description="Codice Fiscale di un Operatore iscritto.")
    num_iscr_sito: Optional[constr(strict=True, max_length=22, min_length=22)] = Field(default=None, description="Numero iscrizione unitÃ  locale")
    identificativo: constr(strict=True, max_length=100, min_length=1) = Field(default=..., description="Identificativo del soggetto associato alle credenziali.")
    identificativo_altro: Optional[constr(strict=True, max_length=100)] = Field(default=None, description="Identificativo alternativo del soggetto associato alle credenziali.")
    user_name: Optional[constr(strict=True, max_length=256)] = Field(default=None, description="Identificativo dell'utente (da SPID, CIE, CNS).")
    device_info: DeviceInfo = Field(default=..., description="Informazioni sul dispositivo.")
    app_info: AppInfo = Field(default=..., description="Informazioni sulla App.")
    __properties = ["identificativo_soggetto", "num_iscr_sito", "identificativo", "identificativo_altro", "user_name", "device_info", "app_info"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateUpdateCredentialsRequest:
        """Create an instance of CreateUpdateCredentialsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of device_info
        if self.device_info:
            _dict['device_info'] = self.device_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_info
        if self.app_info:
            _dict['app_info'] = self.app_info.to_dict()
        # set to None if num_iscr_sito (nullable) is None
        # and __fields_set__ contains the field
        if self.num_iscr_sito is None and "num_iscr_sito" in self.__fields_set__:
            _dict['num_iscr_sito'] = None

        # set to None if identificativo_altro (nullable) is None
        # and __fields_set__ contains the field
        if self.identificativo_altro is None and "identificativo_altro" in self.__fields_set__:
            _dict['identificativo_altro'] = None

        # set to None if user_name (nullable) is None
        # and __fields_set__ contains the field
        if self.user_name is None and "user_name" in self.__fields_set__:
            _dict['user_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateUpdateCredentialsRequest:
        """Create an instance of CreateUpdateCredentialsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateUpdateCredentialsRequest.parse_obj(obj)

        _obj = CreateUpdateCredentialsRequest.parse_obj({
            "identificativo_soggetto": obj.get("identificativo_soggetto"),
            "num_iscr_sito": obj.get("num_iscr_sito"),
            "identificativo": obj.get("identificativo"),
            "identificativo_altro": obj.get("identificativo_altro"),
            "user_name": obj.get("user_name"),
            "device_info": DeviceInfo.from_dict(obj.get("device_info")) if obj.get("device_info") is not None else None,
            "app_info": AppInfo.from_dict(obj.get("app_info")) if obj.get("app_info") is not None else None
        })
        return _obj


