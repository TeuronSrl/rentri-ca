# coding: utf-8

"""
    ca-rentri

    Servizio RENTRI CA

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr

class RentriPushNotification(BaseModel):
    """
    RentriPushNotification
    """
    action: Optional[StrictStr] = None
    handle: Optional[StrictStr] = None
    otp: Optional[StrictStr] = None
    credentials_id: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    body: Optional[StrictStr] = None
    __properties = ["action", "handle", "otp", "credentials_id", "title", "body"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RentriPushNotification:
        """Create an instance of RentriPushNotification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if action (nullable) is None
        # and __fields_set__ contains the field
        if self.action is None and "action" in self.__fields_set__:
            _dict['action'] = None

        # set to None if handle (nullable) is None
        # and __fields_set__ contains the field
        if self.handle is None and "handle" in self.__fields_set__:
            _dict['handle'] = None

        # set to None if otp (nullable) is None
        # and __fields_set__ contains the field
        if self.otp is None and "otp" in self.__fields_set__:
            _dict['otp'] = None

        # set to None if credentials_id (nullable) is None
        # and __fields_set__ contains the field
        if self.credentials_id is None and "credentials_id" in self.__fields_set__:
            _dict['credentials_id'] = None

        # set to None if title (nullable) is None
        # and __fields_set__ contains the field
        if self.title is None and "title" in self.__fields_set__:
            _dict['title'] = None

        # set to None if body (nullable) is None
        # and __fields_set__ contains the field
        if self.body is None and "body" in self.__fields_set__:
            _dict['body'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RentriPushNotification:
        """Create an instance of RentriPushNotification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RentriPushNotification.parse_obj(obj)

        _obj = RentriPushNotification.parse_obj({
            "action": obj.get("action"),
            "handle": obj.get("handle"),
            "otp": obj.get("otp"),
            "credentials_id": obj.get("credentials_id"),
            "title": obj.get("title"),
            "body": obj.get("body")
        })
        return _obj


