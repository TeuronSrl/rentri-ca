# coding: utf-8

"""
    ca-rentri

    Servizio RENTRI CA

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class CertificateModel(BaseModel):
    """
    CertificateModel
    """
    certificato: Optional[StrictStr] = None
    subject: Optional[StrictStr] = None
    data_rilascio: Optional[datetime] = Field(default=None, description="Formato ISO 8601 UTC")
    data_scadenza: Optional[datetime] = Field(default=None, description="Formato ISO 8601 UTC")
    __properties = ["certificato", "subject", "data_rilascio", "data_scadenza"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CertificateModel:
        """Create an instance of CertificateModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if certificato (nullable) is None
        # and __fields_set__ contains the field
        if self.certificato is None and "certificato" in self.__fields_set__:
            _dict['certificato'] = None

        # set to None if subject (nullable) is None
        # and __fields_set__ contains the field
        if self.subject is None and "subject" in self.__fields_set__:
            _dict['subject'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CertificateModel:
        """Create an instance of CertificateModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CertificateModel.parse_obj(obj)

        _obj = CertificateModel.parse_obj({
            "certificato": obj.get("certificato"),
            "subject": obj.get("subject"),
            "data_rilascio": obj.get("data_rilascio"),
            "data_scadenza": obj.get("data_scadenza")
        })
        return _obj


