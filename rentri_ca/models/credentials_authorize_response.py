# coding: utf-8

"""
    ca-rentri

    Servizio RENTRI CA

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class CredentialsAuthorizeResponse(BaseModel):
    """
    CredentialsAuthorizeResponse
    """
    sad: Optional[StrictStr] = Field(default=None, description="SAD (Signature Activation Data), solo nel caso in cui la richiesta di autorizzazione abbia avuto successo.")
    expires_in: Optional[StrictInt] = Field(default=None, description="La durata del SAD espressa in secondi (default 3600), solo nel caso in cui l'autorizzazione sia stata concessa.")
    handle: Optional[StrictStr] = Field(default=None, description="Handle del SAD per verificare lo stato di autorizzazione della richiesta.")
    __properties = ["sad", "expires_in", "handle"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CredentialsAuthorizeResponse:
        """Create an instance of CredentialsAuthorizeResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if sad (nullable) is None
        # and __fields_set__ contains the field
        if self.sad is None and "sad" in self.__fields_set__:
            _dict['sad'] = None

        # set to None if expires_in (nullable) is None
        # and __fields_set__ contains the field
        if self.expires_in is None and "expires_in" in self.__fields_set__:
            _dict['expires_in'] = None

        # set to None if handle (nullable) is None
        # and __fields_set__ contains the field
        if self.handle is None and "handle" in self.__fields_set__:
            _dict['handle'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CredentialsAuthorizeResponse:
        """Create an instance of CredentialsAuthorizeResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CredentialsAuthorizeResponse.parse_obj(obj)

        _obj = CredentialsAuthorizeResponse.parse_obj({
            "sad": obj.get("sad"),
            "expires_in": obj.get("expires_in"),
            "handle": obj.get("handle")
        })
        return _obj


