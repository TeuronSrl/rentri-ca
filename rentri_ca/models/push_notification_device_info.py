# coding: utf-8

"""
    ca-rentri

    Servizio RENTRI CA

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr
from rentri_ca.models.push_notification_device import PushNotificationDevice
from rentri_ca.models.push_notification_type import PushNotificationType

class PushNotificationDeviceInfo(BaseModel):
    """
    PushNotificationDeviceInfo
    """
    type: Optional[PushNotificationType] = None
    is_credentials_deletion: Optional[StrictBool] = None
    credentials_id: Optional[StrictStr] = None
    device: PushNotificationDevice = Field(...)
    identificativo_soggetto: constr(strict=True, min_length=1) = Field(...)
    user_name: Optional[StrictStr] = None
    __properties = ["type", "is_credentials_deletion", "credentials_id", "device", "identificativo_soggetto", "user_name"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PushNotificationDeviceInfo:
        """Create an instance of PushNotificationDeviceInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "type",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of device
        if self.device:
            _dict['device'] = self.device.to_dict()
        # set to None if credentials_id (nullable) is None
        # and __fields_set__ contains the field
        if self.credentials_id is None and "credentials_id" in self.__fields_set__:
            _dict['credentials_id'] = None

        # set to None if user_name (nullable) is None
        # and __fields_set__ contains the field
        if self.user_name is None and "user_name" in self.__fields_set__:
            _dict['user_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PushNotificationDeviceInfo:
        """Create an instance of PushNotificationDeviceInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PushNotificationDeviceInfo.parse_obj(obj)

        _obj = PushNotificationDeviceInfo.parse_obj({
            "type": obj.get("type"),
            "is_credentials_deletion": obj.get("is_credentials_deletion"),
            "credentials_id": obj.get("credentials_id"),
            "device": PushNotificationDevice.from_dict(obj.get("device")) if obj.get("device") is not None else None,
            "identificativo_soggetto": obj.get("identificativo_soggetto"),
            "user_name": obj.get("user_name")
        })
        return _obj


