# coding: utf-8

"""
    ca-rentri

    Servizio RENTRI CA

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from rentri_ca.models.push_notification_device import PushNotificationDevice
from rentri_ca.models.push_notification_type import PushNotificationType
from typing import Optional, Set
from typing_extensions import Self

class PushNotificationDeviceInfo(BaseModel):
    """
    PushNotificationDeviceInfo
    """ # noqa: E501
    type: Optional[PushNotificationType] = None
    is_credentials_deletion: Optional[StrictBool] = None
    credentials_id: Optional[StrictStr] = None
    device: PushNotificationDevice
    identificativo_soggetto: Annotated[str, Field(min_length=1, strict=True)]
    user_name: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["type", "is_credentials_deletion", "credentials_id", "device", "identificativo_soggetto", "user_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PushNotificationDeviceInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of device
        if self.device:
            _dict['device'] = self.device.to_dict()
        # set to None if credentials_id (nullable) is None
        # and model_fields_set contains the field
        if self.credentials_id is None and "credentials_id" in self.model_fields_set:
            _dict['credentials_id'] = None

        # set to None if user_name (nullable) is None
        # and model_fields_set contains the field
        if self.user_name is None and "user_name" in self.model_fields_set:
            _dict['user_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PushNotificationDeviceInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "is_credentials_deletion": obj.get("is_credentials_deletion"),
            "credentials_id": obj.get("credentials_id"),
            "device": PushNotificationDevice.from_dict(obj["device"]) if obj.get("device") is not None else None,
            "identificativo_soggetto": obj.get("identificativo_soggetto"),
            "user_name": obj.get("user_name")
        })
        return _obj


