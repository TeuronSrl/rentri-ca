# coding: utf-8

"""
    ca-rentri

    Servizio RENTRI CA

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class SignatureFormats(BaseModel):
    """
    SignatureFormats
    """
    formats: Optional[conlist(StrictStr)] = Field(default=None, description="Elenco dei formati di firma supportati dal servizio.")
    envelope_properties: Optional[conlist(conlist(StrictStr))] = Field(default=None, description="Elenco delle proprietÃ  riguardanti la busta firmata.")
    __properties = ["formats", "envelope_properties"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SignatureFormats:
        """Create an instance of SignatureFormats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if formats (nullable) is None
        # and __fields_set__ contains the field
        if self.formats is None and "formats" in self.__fields_set__:
            _dict['formats'] = None

        # set to None if envelope_properties (nullable) is None
        # and __fields_set__ contains the field
        if self.envelope_properties is None and "envelope_properties" in self.__fields_set__:
            _dict['envelope_properties'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SignatureFormats:
        """Create an instance of SignatureFormats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SignatureFormats.parse_obj(obj)

        _obj = SignatureFormats.parse_obj({
            "formats": obj.get("formats"),
            "envelope_properties": obj.get("envelope_properties")
        })
        return _obj


