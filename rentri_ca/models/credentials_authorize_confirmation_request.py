# coding: utf-8

"""
    ca-rentri

    Servizio RENTRI CA

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictStr, constr

class CredentialsAuthorizeConfirmationRequest(BaseModel):
    """
    CredentialsAuthorizeConfirmationRequest
    """
    credentials_id: constr(strict=True, max_length=9, min_length=9) = Field(default=..., description="Identificativo delle credenziali.")
    handle: StrictStr = Field(default=..., description="Handle del SAD da autorizzare.")
    otp: constr(strict=True, max_length=6, min_length=6) = Field(default=..., description="OTP ricevuto con la notifica.")
    allowed: StrictBool = Field(default=..., description="Consenso.")
    pin: constr(strict=True, min_length=1) = Field(default=..., description="PIN delle credenziali.")
    __properties = ["credentials_id", "handle", "otp", "allowed", "pin"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CredentialsAuthorizeConfirmationRequest:
        """Create an instance of CredentialsAuthorizeConfirmationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CredentialsAuthorizeConfirmationRequest:
        """Create an instance of CredentialsAuthorizeConfirmationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CredentialsAuthorizeConfirmationRequest.parse_obj(obj)

        _obj = CredentialsAuthorizeConfirmationRequest.parse_obj({
            "credentials_id": obj.get("credentials_id"),
            "handle": obj.get("handle"),
            "otp": obj.get("otp"),
            "allowed": obj.get("allowed"),
            "pin": obj.get("pin")
        })
        return _obj


