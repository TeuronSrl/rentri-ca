# coding: utf-8

"""
    ca-rentri

    Servizio RENTRI CA

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from rentri_ca.models.credentials_sito import CredentialsSito
from rentri_ca.models.stato import Stato

class CredentialsStatusResponse(BaseModel):
    """
    CredentialsStatusResponse
    """
    identifier: Optional[StrictStr] = Field(default=None, description="Identificativo delle credenziali.")
    identificativo: Optional[StrictStr] = Field(default=None, description="Identificativo del soggetto associato alle credenziali.")
    identificativo_altro: Optional[StrictStr] = Field(default=None, description="Identificativo alternativo del soggetto associato alle credenziali.")
    user_name: Optional[StrictStr] = Field(default=None, description="Identificativo dell'utente (da SPID, CIE, CNS).")
    pin: Optional[StrictStr] = Field(default=None, description="PIN.")
    stato: Optional[Stato] = Field(default=None, description="Stato.")
    siti: Optional[conlist(CredentialsSito)] = Field(default=None, description="Elenco delle unità locali sulle quali è possibile operare.")
    is_abbinato_solo_soggetto: Optional[StrictBool] = Field(default=None, description="Indica se le credenziali sono abbinate direttamente al soggetto.")
    __properties = ["identifier", "identificativo", "identificativo_altro", "user_name", "pin", "stato", "siti", "is_abbinato_solo_soggetto"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CredentialsStatusResponse:
        """Create an instance of CredentialsStatusResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in siti (list)
        _items = []
        if self.siti:
            for _item in self.siti:
                if _item:
                    _items.append(_item.to_dict())
            _dict['siti'] = _items
        # set to None if identifier (nullable) is None
        # and __fields_set__ contains the field
        if self.identifier is None and "identifier" in self.__fields_set__:
            _dict['identifier'] = None

        # set to None if identificativo (nullable) is None
        # and __fields_set__ contains the field
        if self.identificativo is None and "identificativo" in self.__fields_set__:
            _dict['identificativo'] = None

        # set to None if identificativo_altro (nullable) is None
        # and __fields_set__ contains the field
        if self.identificativo_altro is None and "identificativo_altro" in self.__fields_set__:
            _dict['identificativo_altro'] = None

        # set to None if user_name (nullable) is None
        # and __fields_set__ contains the field
        if self.user_name is None and "user_name" in self.__fields_set__:
            _dict['user_name'] = None

        # set to None if pin (nullable) is None
        # and __fields_set__ contains the field
        if self.pin is None and "pin" in self.__fields_set__:
            _dict['pin'] = None

        # set to None if siti (nullable) is None
        # and __fields_set__ contains the field
        if self.siti is None and "siti" in self.__fields_set__:
            _dict['siti'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CredentialsStatusResponse:
        """Create an instance of CredentialsStatusResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CredentialsStatusResponse.parse_obj(obj)

        _obj = CredentialsStatusResponse.parse_obj({
            "identifier": obj.get("identifier"),
            "identificativo": obj.get("identificativo"),
            "identificativo_altro": obj.get("identificativo_altro"),
            "user_name": obj.get("user_name"),
            "pin": obj.get("pin"),
            "stato": obj.get("stato"),
            "siti": [CredentialsSito.from_dict(_item) for _item in obj.get("siti")] if obj.get("siti") is not None else None,
            "is_abbinato_solo_soggetto": obj.get("is_abbinato_solo_soggetto")
        })
        return _obj


