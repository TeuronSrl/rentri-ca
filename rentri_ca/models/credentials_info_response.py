# coding: utf-8

"""
    ca-rentri

    Servizio RENTRI CA

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from rentri_ca.models.auth_data import AuthData
from rentri_ca.models.cert_data import CertData
from rentri_ca.models.key_data import KeyData
from rentri_ca.models.signature_qualifier import SignatureQualifier

class CredentialsInfoResponse(BaseModel):
    """
    CredentialsInfoResponse
    """
    description: Optional[StrictStr] = Field(default=None, description="Descrizione delle credenziali.")
    signature_qualifier: Optional[SignatureQualifier] = Field(default=None, description="Identificativo che qualifica il tipo di firma per cui sono adatte le credenziali.")
    key: Optional[KeyData] = Field(default=None, description="Informazioni sulla chiave di firma.")
    cert: Optional[CertData] = Field(default=None, description="Informazioni sul certificato.")
    auth: Optional[AuthData] = Field(default=None, description="Informazioni sulla modalitÃ  di autorizzazione.")
    scal: Optional[StrictStr] = Field(default=None, description="Indica se il servizio di autorizzazione genera un Signature Activation Data (SAD) che contiene un collegamento con i codici hash da firmare. 1 - non collegato (default) 2 - collegato")
    multisign: Optional[StrictInt] = Field(default=None, description="Numero massimo di firme che possono essere create con queste credenziali con una singola richiesta.")
    lang: Optional[StrictStr] = Field(default=None, description="Lingua prescelta per la risposta, specificata secondo RFC 5646.")
    __properties = ["description", "signature_qualifier", "key", "cert", "auth", "scal", "multisign", "lang"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CredentialsInfoResponse:
        """Create an instance of CredentialsInfoResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of key
        if self.key:
            _dict['key'] = self.key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cert
        if self.cert:
            _dict['cert'] = self.cert.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auth
        if self.auth:
            _dict['auth'] = self.auth.to_dict()
        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if signature_qualifier (nullable) is None
        # and __fields_set__ contains the field
        if self.signature_qualifier is None and "signature_qualifier" in self.__fields_set__:
            _dict['signature_qualifier'] = None

        # set to None if key (nullable) is None
        # and __fields_set__ contains the field
        if self.key is None and "key" in self.__fields_set__:
            _dict['key'] = None

        # set to None if cert (nullable) is None
        # and __fields_set__ contains the field
        if self.cert is None and "cert" in self.__fields_set__:
            _dict['cert'] = None

        # set to None if auth (nullable) is None
        # and __fields_set__ contains the field
        if self.auth is None and "auth" in self.__fields_set__:
            _dict['auth'] = None

        # set to None if scal (nullable) is None
        # and __fields_set__ contains the field
        if self.scal is None and "scal" in self.__fields_set__:
            _dict['scal'] = None

        # set to None if multisign (nullable) is None
        # and __fields_set__ contains the field
        if self.multisign is None and "multisign" in self.__fields_set__:
            _dict['multisign'] = None

        # set to None if lang (nullable) is None
        # and __fields_set__ contains the field
        if self.lang is None and "lang" in self.__fields_set__:
            _dict['lang'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CredentialsInfoResponse:
        """Create an instance of CredentialsInfoResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CredentialsInfoResponse.parse_obj(obj)

        _obj = CredentialsInfoResponse.parse_obj({
            "description": obj.get("description"),
            "signature_qualifier": obj.get("signature_qualifier"),
            "key": KeyData.from_dict(obj.get("key")) if obj.get("key") is not None else None,
            "cert": CertData.from_dict(obj.get("cert")) if obj.get("cert") is not None else None,
            "auth": AuthData.from_dict(obj.get("auth")) if obj.get("auth") is not None else None,
            "scal": obj.get("scal"),
            "multisign": obj.get("multisign"),
            "lang": obj.get("lang")
        })
        return _obj


