# coding: utf-8

"""
    ca-rentri

    Servizio RENTRI CA

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict
from pydantic import BaseModel, Field, StrictStr, constr
from rentri_ca.models.device_type import DeviceType

class DeviceInfo(BaseModel):
    """
    Informazioni sul dispositivo.  # noqa: E501
    """
    identifier: constr(strict=True, max_length=50, min_length=1) = Field(default=..., description="Identificativo del dispositivo.")
    model: constr(strict=True, max_length=50, min_length=1) = Field(default=..., description="Modello del dispositivo.")
    manufacturer: constr(strict=True, max_length=50, min_length=1) = Field(default=..., description="Produttore del dispositivo.")
    name: constr(strict=True, max_length=150, min_length=1) = Field(default=..., description="Nome del dispositivo.")
    os_version: constr(strict=True, max_length=14, min_length=1) = Field(default=..., description="Versione del Sistema Operativo del dispositivo.")
    form_factor: constr(strict=True, max_length=20, min_length=1) = Field(default=..., description="Stile del dispositivo.")
    type: DeviceType = Field(default=..., description="Tipo di dispositivo.<p>Valori ammessi:<ul style=\"margin:0\"><li><i>Physical</i> - Dispositivo fisico</li><li><i>Virtual</i> - Dispositivo virtuale</li></ul></p>")
    platform: constr(strict=True, max_length=20, min_length=1) = Field(default=..., description="Piattaforma del dispositivo.")
    notification_callback_uri: constr(strict=True, max_length=2000, min_length=1) = Field(default=..., description="URI di callback alla quale verranno inviati in POST i dati delle notifiche RENTRI.")
    notification_callback_parameters: Dict[str, StrictStr] = Field(default=..., description="Dizionario di parametri custom che verranno inviati, tra i dati delle notifiche, all'URI di callback.")
    __properties = ["identifier", "model", "manufacturer", "name", "os_version", "form_factor", "type", "platform", "notification_callback_uri", "notification_callback_parameters"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DeviceInfo:
        """Create an instance of DeviceInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DeviceInfo:
        """Create an instance of DeviceInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DeviceInfo.parse_obj(obj)

        _obj = DeviceInfo.parse_obj({
            "identifier": obj.get("identifier"),
            "model": obj.get("model"),
            "manufacturer": obj.get("manufacturer"),
            "name": obj.get("name"),
            "os_version": obj.get("os_version"),
            "form_factor": obj.get("form_factor"),
            "type": obj.get("type"),
            "platform": obj.get("platform"),
            "notification_callback_uri": obj.get("notification_callback_uri"),
            "notification_callback_parameters": obj.get("notification_callback_parameters")
        })
        return _obj


