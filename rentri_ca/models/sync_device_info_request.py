# coding: utf-8

"""
    ca-rentri

    Servizio RENTRI CA

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictStr, constr
from rentri_ca.models.app_info import AppInfo

class SyncDeviceInfoRequest(BaseModel):
    """
    SyncDeviceInfoRequest
    """
    identifier: constr(strict=True, max_length=50, min_length=1) = Field(default=..., description="Identificativo del dispositivo.")
    name: constr(strict=True, max_length=150, min_length=1) = Field(default=..., description="Nome.")
    os_version: constr(strict=True, max_length=14, min_length=1) = Field(default=..., description="Versione del Sistema Operativo.")
    notification_callback_uri: constr(strict=True, max_length=2000, min_length=1) = Field(default=..., description="URI di callback alla quale verranno inviati in POST i dati delle notifiche RENTRI.")
    notification_callback_parameters: Dict[str, StrictStr] = Field(default=..., description="Dizionario di parametri custom che verranno inviati, tra i dati delle notifiche, all'URI di callback.")
    app_info: Optional[AppInfo] = Field(default=None, description="Informazioni sulla App installata.")
    __properties = ["identifier", "name", "os_version", "notification_callback_uri", "notification_callback_parameters", "app_info"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SyncDeviceInfoRequest:
        """Create an instance of SyncDeviceInfoRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of app_info
        if self.app_info:
            _dict['app_info'] = self.app_info.to_dict()
        # set to None if app_info (nullable) is None
        # and __fields_set__ contains the field
        if self.app_info is None and "app_info" in self.__fields_set__:
            _dict['app_info'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SyncDeviceInfoRequest:
        """Create an instance of SyncDeviceInfoRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SyncDeviceInfoRequest.parse_obj(obj)

        _obj = SyncDeviceInfoRequest.parse_obj({
            "identifier": obj.get("identifier"),
            "name": obj.get("name"),
            "os_version": obj.get("os_version"),
            "notification_callback_uri": obj.get("notification_callback_uri"),
            "notification_callback_parameters": obj.get("notification_callback_parameters"),
            "app_info": AppInfo.from_dict(obj.get("app_info")) if obj.get("app_info") is not None else None
        })
        return _obj


