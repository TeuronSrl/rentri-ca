# coding: utf-8

"""
    ca-rentri

    Servizio RENTRI CA

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from rentri_ca.models.sign_algorithms import SignAlgorithms
from rentri_ca.models.signature_formats import SignatureFormats

class InfoData(BaseModel):
    """
    InfoData
    """
    specs: Optional[StrictStr] = Field(default=None, description="Versione della specifica CSC implementata.")
    name: Optional[StrictStr] = Field(default=None, description="Nome commerciale del servizio.")
    logo: Optional[StrictStr] = Field(default=None, description="L'URI del file immagine del logo del servizio.")
    region: Optional[StrictStr] = Field(default=None, description="Codice ISO 3166-1 del paese in cui il fornitore di servizi è stabilito.")
    lang: Optional[StrictStr] = Field(default=None, description="Lingua utilizzata per la risposta, specificata secondo RFC 5646.")
    description: Optional[StrictStr] = Field(default=None, description="Descrizione del servizio.")
    auth_type: Optional[conlist(StrictStr)] = Field(default=None, description="Metodi di autenticazione supportati dal servizio.")
    oauth2: Optional[StrictStr] = Field(default=None, description="URI di base del server di autorizzazione OAuth 2.0.")
    methods: Optional[conlist(StrictStr)] = Field(default=None, description="Elenco dei nomi di tutti i metodi API implementati dal servizio.")
    sign_algorithms: Optional[SignAlgorithms] = Field(default=None, description="Algoritmi di firma supportati dal servizio.")
    signature_formats: Optional[SignatureFormats] = Field(default=None, description="Formati di firma supportati dal servizio.")
    conformance_levels: Optional[conlist(StrictStr)] = Field(default=None, description="Elenco dei livelli di conformità della firma supportati dal servizio.")
    __properties = ["specs", "name", "logo", "region", "lang", "description", "auth_type", "oauth2", "methods", "sign_algorithms", "signature_formats", "conformance_levels"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InfoData:
        """Create an instance of InfoData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of sign_algorithms
        if self.sign_algorithms:
            _dict['sign_algorithms'] = self.sign_algorithms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of signature_formats
        if self.signature_formats:
            _dict['signature_formats'] = self.signature_formats.to_dict()
        # set to None if specs (nullable) is None
        # and __fields_set__ contains the field
        if self.specs is None and "specs" in self.__fields_set__:
            _dict['specs'] = None

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if logo (nullable) is None
        # and __fields_set__ contains the field
        if self.logo is None and "logo" in self.__fields_set__:
            _dict['logo'] = None

        # set to None if region (nullable) is None
        # and __fields_set__ contains the field
        if self.region is None and "region" in self.__fields_set__:
            _dict['region'] = None

        # set to None if lang (nullable) is None
        # and __fields_set__ contains the field
        if self.lang is None and "lang" in self.__fields_set__:
            _dict['lang'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if auth_type (nullable) is None
        # and __fields_set__ contains the field
        if self.auth_type is None and "auth_type" in self.__fields_set__:
            _dict['auth_type'] = None

        # set to None if oauth2 (nullable) is None
        # and __fields_set__ contains the field
        if self.oauth2 is None and "oauth2" in self.__fields_set__:
            _dict['oauth2'] = None

        # set to None if methods (nullable) is None
        # and __fields_set__ contains the field
        if self.methods is None and "methods" in self.__fields_set__:
            _dict['methods'] = None

        # set to None if sign_algorithms (nullable) is None
        # and __fields_set__ contains the field
        if self.sign_algorithms is None and "sign_algorithms" in self.__fields_set__:
            _dict['sign_algorithms'] = None

        # set to None if signature_formats (nullable) is None
        # and __fields_set__ contains the field
        if self.signature_formats is None and "signature_formats" in self.__fields_set__:
            _dict['signature_formats'] = None

        # set to None if conformance_levels (nullable) is None
        # and __fields_set__ contains the field
        if self.conformance_levels is None and "conformance_levels" in self.__fields_set__:
            _dict['conformance_levels'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InfoData:
        """Create an instance of InfoData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InfoData.parse_obj(obj)

        _obj = InfoData.parse_obj({
            "specs": obj.get("specs"),
            "name": obj.get("name"),
            "logo": obj.get("logo"),
            "region": obj.get("region"),
            "lang": obj.get("lang"),
            "description": obj.get("description"),
            "auth_type": obj.get("auth_type"),
            "oauth2": obj.get("oauth2"),
            "methods": obj.get("methods"),
            "sign_algorithms": SignAlgorithms.from_dict(obj.get("sign_algorithms")) if obj.get("sign_algorithms") is not None else None,
            "signature_formats": SignatureFormats.from_dict(obj.get("signature_formats")) if obj.get("signature_formats") is not None else None,
            "conformance_levels": obj.get("conformance_levels")
        })
        return _obj


