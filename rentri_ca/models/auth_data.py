# coding: utf-8

"""
    ca-rentri

    Servizio RENTRI CA

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from rentri_ca.models.auth_mode import AuthMode
from rentri_ca.models.auth_object_info import AuthObjectInfo

class AuthData(BaseModel):
    """
    AuthData
    """
    mode: Optional[AuthMode] = Field(default=None, description="Modalità di autorizzazione.<p>Valori ammessi:<ul style=\"margin:0\"><li><i>Implicit</i> - Il processo autorizzativo è gestito dal servizio. I fattori autenticativi sono gestiti dal servizio interagendo direttamente con l'utente, e non con l'applicazione di firma.</li><li><i>Explicit</i> - Il processo autorizzativo è gestito dall'applicazione di firma, che gestisce i fattori di autenticazione come PIN o One-Time Password (OTP).</li><li><i>Oauth2Code</i> - Il processo autorizzativo è gestito da un servizio di autenticazione utilizzando OAuth 2.0.</li><li><i>Oauth2Token</i> - Il processo autorizzativo è gestito da un servizio di autenticazione utilizzando OAuth 2.0.</li></ul></p>")
    expression: Optional[StrictStr] = None
    objects: Optional[conlist(AuthObjectInfo)] = Field(default=None, description="Informazioni sui metodi di autenticazione disponibili.")
    __properties = ["mode", "expression", "objects"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AuthData:
        """Create an instance of AuthData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in objects (list)
        _items = []
        if self.objects:
            for _item in self.objects:
                if _item:
                    _items.append(_item.to_dict())
            _dict['objects'] = _items
        # set to None if mode (nullable) is None
        # and __fields_set__ contains the field
        if self.mode is None and "mode" in self.__fields_set__:
            _dict['mode'] = None

        # set to None if expression (nullable) is None
        # and __fields_set__ contains the field
        if self.expression is None and "expression" in self.__fields_set__:
            _dict['expression'] = None

        # set to None if objects (nullable) is None
        # and __fields_set__ contains the field
        if self.objects is None and "objects" in self.__fields_set__:
            _dict['objects'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AuthData:
        """Create an instance of AuthData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AuthData.parse_obj(obj)

        _obj = AuthData.parse_obj({
            "mode": obj.get("mode"),
            "expression": obj.get("expression"),
            "objects": [AuthObjectInfo.from_dict(_item) for _item in obj.get("objects")] if obj.get("objects") is not None else None
        })
        return _obj


